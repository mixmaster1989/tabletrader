#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import logging
import time
import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from bybit_api import BybitAPI

@dataclass
class TradingSignal:
    symbol: str
    direction: str  # 'LONG' –∏–ª–∏ 'SHORT'
    entry_price: float
    take_profit: float
    stop_loss: float
    confidence: float  # 0.0 - 1.0
    strategy: str
    reasoning: str
    risk_reward_ratio: float

class MarketAnalyzer:
    def __init__(self, bybit_api: BybitAPI):
        self.bybit_api = bybit_api
        self.logger = logging.getLogger(__name__)
        
    def get_klines(self, symbol: str, interval: str = "1h", limit: int = 100) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Bybit API
            result = self.bybit_api.session.get_kline(
                category="linear",
                symbol=symbol,
                interval=interval,
                limit=limit
            )
            
            if result.get('retCode') == 0:
                klines = result.get('result', {}).get('list', [])
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
                df = pd.DataFrame(klines, columns=[
                    'timestamp', 'open', 'high', 'low', 'close', 'volume', 'turnover'
                ])
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã
                for col in ['open', 'high', 'low', 'close', 'volume', 'turnover']:
                    df[col] = pd.to_numeric(df[col], errors='coerce')
                
                df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                df = df.sort_values('timestamp').reset_index(drop=True)
                
                return df
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {result}")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è klines –¥–ª—è {symbol}: {e}")
            return None
    
    def calculate_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        try:
            # RSI
            df['rsi'] = self._calculate_rsi(df['close'], period=14)
            
            # MACD
            df['ema12'] = df['close'].ewm(span=12).mean()
            df['ema26'] = df['close'].ewm(span=26).mean()
            df['macd'] = df['ema12'] - df['ema26']
            df['macd_signal'] = df['macd'].ewm(span=9).mean()
            df['macd_histogram'] = df['macd'] - df['macd_signal']
            
            # Bollinger Bands
            df['bb_middle'] = df['close'].rolling(window=20).mean()
            bb_std = df['close'].rolling(window=20).std()
            df['bb_upper'] = df['bb_middle'] + (bb_std * 2)
            df['bb_lower'] = df['bb_middle'] - (bb_std * 2)
            
            # Stochastic
            df['stoch_k'] = self._calculate_stochastic(df, period=14)
            df['stoch_d'] = df['stoch_k'].rolling(window=3).mean()
            
            # ATR (Average True Range)
            df['atr'] = self._calculate_atr(df, period=14)
            
            # Volume indicators
            df['volume_sma'] = df['volume'].rolling(window=20).mean()
            df['volume_ratio'] = df['volume'] / df['volume_sma']
            
            return df
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return df
    
    def _calculate_rsi(self, prices: pd.Series, period: int = 14) -> pd.Series:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å RSI"""
        delta = prices.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        return rsi
    
    def _calculate_stochastic(self, df: pd.DataFrame, period: int = 14) -> pd.Series:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å Stochastic"""
        lowest_low = df['low'].rolling(window=period).min()
        highest_high = df['high'].rolling(window=period).max()
        k = 100 * ((df['close'] - lowest_low) / (highest_high - lowest_low))
        return k
    
    def _calculate_atr(self, df: pd.DataFrame, period: int = 14) -> pd.Series:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å ATR"""
        high_low = df['high'] - df['low']
        high_close = np.abs(df['high'] - df['close'].shift())
        low_close = np.abs(df['low'] - df['close'].shift())
        
        true_range = np.maximum(high_low, np.maximum(high_close, low_close))
        atr = true_range.rolling(window=period).mean()
        return atr
    
    def analyze_symbol(self, symbol: str) -> List[TradingSignal]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã"""
        try:
            self.logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {symbol}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = self.get_klines(symbol, interval="1h", limit=100)
            if df is None or df.empty:
                return []
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df = self.calculate_indicators(df)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = self.bybit_api.get_last_price(symbol)
            if current_price is None:
                return []
            
            signals = []
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: RSI + MACD
            signal1 = self._rsi_macd_strategy(df, symbol, current_price)
            if signal1:
                signals.append(signal1)
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: Bollinger Bands + Volume
            signal2 = self._bollinger_volume_strategy(df, symbol, current_price)
            if signal2:
                signals.append(signal2)
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: Stochastic + ATR
            signal3 = self._stochastic_atr_strategy(df, symbol, current_price)
            if signal3:
                signals.append(signal3)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            signals.sort(key=lambda x: x.confidence, reverse=True)
            
            self.logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}")
            return signals[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return []
    
    def _rsi_macd_strategy(self, df: pd.DataFrame, symbol: str, current_price: float) -> Optional[TradingSignal]:
        """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI –∏ MACD"""
        try:
            if len(df) < 30:
                return None
            
            latest = df.iloc[-1]
            prev = df.iloc[-2]
            
            # –£—Å–ª–æ–≤–∏—è –¥–ª—è LONG
            rsi_oversold = latest['rsi'] < 30 and prev['rsi'] >= 30
            macd_bullish = latest['macd'] > latest['macd_signal'] and prev['macd'] <= prev['macd_signal']
            
            # –£—Å–ª–æ–≤–∏—è –¥–ª—è SHORT
            rsi_overbought = latest['rsi'] > 70 and prev['rsi'] <= 70
            macd_bearish = latest['macd'] < latest['macd_signal'] and prev['macd'] >= prev['macd_signal']
            
            if rsi_oversold and macd_bullish:
                # LONG —Å–∏–≥–Ω–∞–ª
                atr = latest['atr']
                entry_price = current_price
                take_profit = entry_price + (atr * 2)
                stop_loss = entry_price - (atr * 1.5)
                confidence = min(0.8, (30 - latest['rsi']) / 30 * 0.8)
                
                return TradingSignal(
                    symbol=symbol,
                    direction='LONG',
                    entry_price=entry_price,
                    take_profit=take_profit,
                    stop_loss=stop_loss,
                    confidence=confidence,
                    strategy='RSI + MACD',
                    reasoning=f"RSI oversold ({latest['rsi']:.1f}), MACD bullish crossover",
                    risk_reward_ratio=(take_profit - entry_price) / (entry_price - stop_loss)
                )
            
            elif rsi_overbought and macd_bearish:
                # SHORT —Å–∏–≥–Ω–∞–ª
                atr = latest['atr']
                entry_price = current_price
                take_profit = entry_price - (atr * 2)
                stop_loss = entry_price + (atr * 1.5)
                confidence = min(0.8, (latest['rsi'] - 70) / 30 * 0.8)
                
                return TradingSignal(
                    symbol=symbol,
                    direction='SHORT',
                    entry_price=entry_price,
                    take_profit=take_profit,
                    stop_loss=stop_loss,
                    confidence=confidence,
                    strategy='RSI + MACD',
                    reasoning=f"RSI overbought ({latest['rsi']:.1f}), MACD bearish crossover",
                    risk_reward_ratio=(entry_price - take_profit) / (stop_loss - entry_price)
                )
            
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ RSI+MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return None
    
    def _bollinger_volume_strategy(self, df: pd.DataFrame, symbol: str, current_price: float) -> Optional[TradingSignal]:
        """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ Bollinger Bands –∏ –æ–±—ä–µ–º–∞"""
        try:
            if len(df) < 20:
                return None
            
            latest = df.iloc[-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º
            volume_spike = latest['volume_ratio'] > 1.5
            
            if volume_spike:
                # LONG –µ—Å–ª–∏ —Ü–µ–Ω–∞ –±–ª–∏–∑–∫–æ –∫ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å–µ
                if current_price <= latest['bb_lower'] * 1.01:
                    atr = latest['atr']
                    entry_price = current_price
                    take_profit = latest['bb_middle']  # –¶–µ–ª—å - —Å—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è
                    stop_loss = entry_price - (atr * 1.2)
                    confidence = min(0.7, latest['volume_ratio'] / 3 * 0.7)
                    
                    return TradingSignal(
                        symbol=symbol,
                        direction='LONG',
                        entry_price=entry_price,
                        take_profit=take_profit,
                        stop_loss=stop_loss,
                        confidence=confidence,
                        strategy='Bollinger + Volume',
                        reasoning=f"Price at BB lower band, volume spike ({latest['volume_ratio']:.1f}x)",
                        risk_reward_ratio=(take_profit - entry_price) / (entry_price - stop_loss)
                    )
                
                # SHORT –µ—Å–ª–∏ —Ü–µ–Ω–∞ –±–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å–µ
                elif current_price >= latest['bb_upper'] * 0.99:
                    atr = latest['atr']
                    entry_price = current_price
                    take_profit = latest['bb_middle']  # –¶–µ–ª—å - —Å—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è
                    stop_loss = entry_price + (atr * 1.2)
                    confidence = min(0.7, latest['volume_ratio'] / 3 * 0.7)
                    
                    return TradingSignal(
                        symbol=symbol,
                        direction='SHORT',
                        entry_price=entry_price,
                        take_profit=take_profit,
                        stop_loss=stop_loss,
                        confidence=confidence,
                        strategy='Bollinger + Volume',
                        reasoning=f"Price at BB upper band, volume spike ({latest['volume_ratio']:.1f}x)",
                        risk_reward_ratio=(entry_price - take_profit) / (stop_loss - entry_price)
                    )
            
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Bollinger+Volume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return None
    
    def _stochastic_atr_strategy(self, df: pd.DataFrame, symbol: str, current_price: float) -> Optional[TradingSignal]:
        """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ Stochastic –∏ ATR"""
        try:
            if len(df) < 20:
                return None
            
            latest = df.iloc[-1]
            prev = df.iloc[-2]
            
            # –£—Å–ª–æ–≤–∏—è –¥–ª—è LONG
            stoch_oversold = latest['stoch_k'] < 20 and latest['stoch_d'] < 20
            stoch_bullish = latest['stoch_k'] > latest['stoch_d'] and prev['stoch_k'] <= prev['stoch_d']
            
            # –£—Å–ª–æ–≤–∏—è –¥–ª—è SHORT
            stoch_overbought = latest['stoch_k'] > 80 and latest['stoch_d'] > 80
            stoch_bearish = latest['stoch_k'] < latest['stoch_d'] and prev['stoch_k'] >= prev['stoch_d']
            
            if stoch_oversold and stoch_bullish:
                # LONG —Å–∏–≥–Ω–∞–ª
                atr = latest['atr']
                entry_price = current_price
                take_profit = entry_price + (atr * 2.5)
                stop_loss = entry_price - (atr * 1.8)
                confidence = min(0.6, (20 - latest['stoch_k']) / 20 * 0.6)
                
                return TradingSignal(
                    symbol=symbol,
                    direction='LONG',
                    entry_price=entry_price,
                    take_profit=take_profit,
                    stop_loss=stop_loss,
                    confidence=confidence,
                    strategy='Stochastic + ATR',
                    reasoning=f"Stochastic oversold ({latest['stoch_k']:.1f}), bullish crossover",
                    risk_reward_ratio=(take_profit - entry_price) / (entry_price - stop_loss)
                )
            
            elif stoch_overbought and stoch_bearish:
                # SHORT —Å–∏–≥–Ω–∞–ª
                atr = latest['atr']
                entry_price = current_price
                take_profit = entry_price - (atr * 2.5)
                stop_loss = entry_price + (atr * 1.8)
                confidence = min(0.6, (latest['stoch_k'] - 80) / 20 * 0.6)
                
                return TradingSignal(
                    symbol=symbol,
                    direction='SHORT',
                    entry_price=entry_price,
                    take_profit=take_profit,
                    stop_loss=stop_loss,
                    confidence=confidence,
                    strategy='Stochastic + ATR',
                    reasoning=f"Stochastic overbought ({latest['stoch_k']:.1f}), bearish crossover",
                    risk_reward_ratio=(entry_price - take_profit) / (stop_loss - entry_price)
                )
            
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Stochastic+ATR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return None
    
    def get_popular_symbols(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        return [
            'BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'ADAUSDT', 'XRPUSDT',
            'BNBUSDT', 'AVAXUSDT', 'LINKUSDT', 'DOGEUSDT', 'NEARUSDT',
            'PEOPLEUSDT', 'MATICUSDT', 'DOTUSDT', 'LTCUSDT', 'BCHUSDT'
        ]
    
    def analyze_all_symbols(self) -> Dict[str, List[TradingSignal]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"""
        results = {}
        symbols = self.get_popular_symbols()
        
        for symbol in symbols:
            try:
                signals = self.analyze_symbol(symbol)
                if signals:
                    results[symbol] = signals
                time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                continue
        
        return results 