#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Telegram Bot –¥–ª—è Google Signals Bot —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
"""

import logging
import requests
import json
from typing import Optional, Dict, Any
from datetime import datetime
import re
import time

class TelegramBot:
    def __init__(self, bot_token: str, chat_id: str, google_sheets_api=None):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.logger = logging.getLogger(__name__)
        self.google_sheets_api = google_sheets_api
        self.market_analyzer = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
        self.user_states = {}
        
        self.logger.info("‚úÖ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def send_message(self, message: str, parse_mode: str = "HTML", reply_markup: dict = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': parse_mode
            }
            
            if reply_markup:
                data['reply_markup'] = json.dumps(reply_markup)
            
            response = requests.post(url, data=data, timeout=10)
            
            if response.status_code == 200:
                self.logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    def send_error(self, error_message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        message = f"‚ùå –û–®–ò–ë–ö–ê –ë–û–¢–ê:\n\n{error_message}"
        return self.send_message(message)
    
    def send_status(self, status_data: dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            message = f"""ü§ñ –°–¢–ê–¢–£–° –ë–û–¢–ê

üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {status_data.get('processed_signals', 0)}
üìà –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {status_data.get('open_positions', 0)}/{status_data.get('max_positions', 0)}
üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {status_data.get('last_check', 'N/A')}

‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"""
            
            return self.send_message(message)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    def send_position_update(self, position_data: dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            message = f"""üìä –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò

ü™ô –ú–æ–Ω–µ—Ç–∞: {position_data.get('symbol', 'N/A')}
üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {position_data.get('side', 'N/A')}
üí∞ –†–∞–∑–º–µ—Ä: {position_data.get('size', 'N/A')}
üíµ PnL: {position_data.get('pnl', 'N/A')}
üìä ROI: {position_data.get('roi', 'N/A')}%"""
            
            return self.send_message(message)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False
    
    def send_add_trade_menu(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        message = """üìù –î–û–ë–ê–í–ò–¢–¨ –ù–û–í–£–Æ –°–î–ï–õ–ö–£

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É", "callback_data": "add_trade"}],
                [{"text": "üîç –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞", "callback_data": "market_analysis"}],
                [{"text": "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å", "callback_data": "status"}],
                [{"text": "üéØ –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏", "callback_data": "testnet_status"}],
                [{"text": "üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞", "callback_data": "balance"}],
                [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "cancel"}]
            ]
        }
        
        return self.send_message(message, reply_markup=keyboard)
    
    def send_symbol_selection(self, user_id: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞"""
        message = """ü™ô –í–´–ë–ï–†–ò–¢–ï –°–ò–ú–í–û–õ

–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è —Å–¥–µ–ª–∫–∏:"""
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "ADA", "callback_data": f"symbol_ADA"}, {"text": "SOL", "callback_data": f"symbol_SOL"}],
                [{"text": "BNB", "callback_data": f"symbol_BNB"}, {"text": "DOGE", "callback_data": f"symbol_DOGE"}],
                [{"text": "NEAR", "callback_data": f"symbol_NEAR"}, {"text": "PEOPLE", "callback_data": f"symbol_PEOPLE"}],
                [{"text": "TON", "callback_data": f"symbol_TON"}, {"text": "HMSRT", "callback_data": f"symbol_HMSRT"}],
                [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "cancel"}]
            ]
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = {"state": "selecting_symbol"}
        
        return self.send_message(message, reply_markup=keyboard)
    
    def send_direction_selection(self, user_id: str, symbol: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        message = f"""üìà –í–´–ë–ï–†–ò–¢–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –î–õ–Ø {symbol}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:"""
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üìà LONG (–ü–æ–∫—É–ø–∫–∞)", "callback_data": f"direction_LONG"}],
                [{"text": "üìâ SHORT (–ü—Ä–æ–¥–∞–∂–∞)", "callback_data": f"direction_SHORT"}],
                [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "cancel"}]
            ]
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.user_states:
            self.user_states[user_id]["symbol"] = symbol
            self.user_states[user_id]["state"] = "selecting_direction"
        
        return self.send_message(message, reply_markup=keyboard)
    
    def send_price_input(self, user_id: str, symbol: str, direction: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞"""
        message = f"""üí∞ –í–í–ï–î–ò–¢–ï –¶–ï–ù–£ –í–•–û–î–ê

ü™ô –°–∏–º–≤–æ–ª: {symbol}
üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}

–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.33591):"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.user_states:
            self.user_states[user_id]["direction"] = direction
            self.user_states[user_id]["state"] = "entering_entry_price"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "cancel"}]
            ]
        }
        
        return self.send_message(message, reply_markup=keyboard)
    
    def send_exit_price_input(self, user_id: str, symbol: str, direction: str, entry_price: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Ü–µ–Ω—ã –≤—ã—Ö–æ–¥–∞"""
        message = f"""üí∞ –í–í–ï–î–ò–¢–ï –¶–ï–ù–£ –í–´–•–û–î–ê

ü™ô –°–∏–º–≤–æ–ª: {symbol}
üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}
üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}

–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—ã—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.34001):"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.user_states:
            self.user_states[user_id]["entry_price"] = entry_price
            self.user_states[user_id]["state"] = "entering_exit_price"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "cancel"}]
            ]
        }
        
        return self.send_message(message, reply_markup=keyboard)
    
    def send_stop_loss_input(self, user_id: str, symbol: str, direction: str, entry_price: str, exit_price: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
        message = f"""üõë –í–í–ï–î–ò–¢–ï –°–¢–û–ü-–õ–û–°–°

ü™ô –°–∏–º–≤–æ–ª: {symbol}
üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}
üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}
üí∞ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {exit_price}

–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.33181):"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.user_states:
            self.user_states[user_id]["exit_price"] = exit_price
            self.user_states[user_id]["state"] = "entering_stop_loss"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "cancel"}]
            ]
        }
        
        return self.send_message(message, reply_markup=keyboard)
    
    def send_trade_confirmation(self, user_id: str, trade_data: dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
        entry_price = float(trade_data["entry_price"])
        exit_price = float(trade_data["exit_price"])
        
        if trade_data["direction"] == "LONG":
            pnl_percent = ((exit_price - entry_price) / entry_price) * 100
        else:  # SHORT
            pnl_percent = ((entry_price - exit_price) / entry_price) * 100
        
        message = f"""‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –°–î–ï–õ–ö–ò

ü™ô –°–∏–º–≤–æ–ª: {trade_data['symbol']}
üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trade_data['direction']}
üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {trade_data['entry_price']}
üí∞ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {trade_data['exit_price']}
üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {trade_data['stop_loss']}
üìä P&L: {pnl_percent:.2f}%

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:"""
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data": "confirm_trade"}],
                [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "cancel"}]
            ]
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        if user_id in self.user_states:
            self.user_states[user_id]["trade_data"] = trade_data
            self.user_states[user_id]["state"] = "confirming_trade"
        
        return self.send_message(message, reply_markup=keyboard)
    
    def add_trade_to_sheet(self, trade_data: dict) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É –≤ Google —Ç–∞–±–ª–∏—Ü—É"""
        try:
            if not self.google_sheets_api:
                self.logger.error("‚ùå Google Sheets API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            current_date = datetime.now().strftime("%d.%m.%Y %H:%M")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
            next_row = self.google_sheets_api.get_next_row_number()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            row_data = [
                str(next_row),  # –ù–æ–º–µ—Ä
                current_date,   # –î–∞—Ç–∞ –≤—Ö–æ–¥–∞
                trade_data["symbol"],  # –°–∏–º–≤–æ–ª
                trade_data["entry_price"],  # –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
                trade_data["direction"],  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                trade_data["exit_price"],  # –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞
                "X10",  # –ü–ª–µ—á–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                trade_data["stop_loss"],  # –°—Ç–æ–ø-–ª–æ—Å—Å
                "$1 000,00",  # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                "",  # P&L (–±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
                current_date  # –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
            success = self.google_sheets_api.add_trade_row(row_data)
            
            if success:
                self.logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É: {trade_data['symbol']} {trade_data['direction']}")
                return True
            else:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            return False
    
    def send_market_analysis_menu(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        message = """üîç –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:"""
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üìä –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç", "callback_data": "analyze_all"}],
                [{"text": "ü™ô –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã", "callback_data": "analyze_symbol"}],
                [{"text": "üìà –õ—É—á—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã", "callback_data": "best_signals"}],
                [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_main"}]
            ]
        }
        
        return self.send_message(message, reply_markup=keyboard)
    
    def send_symbol_analysis_selection(self, user_id: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        message = """ü™ô –í–´–ë–ï–†–ò–¢–ï –ú–û–ù–ï–¢–£ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê

–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:"""
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "BTC", "callback_data": f"analyze_BTCUSDT"}, {"text": "ETH", "callback_data": f"analyze_ETHUSDT"}],
                [{"text": "SOL", "callback_data": f"analyze_SOLUSDT"}, {"text": "ADA", "callback_data": f"analyze_ADAUSDT"}],
                [{"text": "XRP", "callback_data": f"analyze_XRPUSDT"}, {"text": "BNB", "callback_data": f"analyze_BNBUSDT"}],
                [{"text": "AVAX", "callback_data": f"analyze_AVAXUSDT"}, {"text": "LINK", "callback_data": f"analyze_LINKUSDT"}],
                [{"text": "DOGE", "callback_data": f"analyze_DOGEUSDT"}, {"text": "NEAR", "callback_data": f"analyze_NEARUSDT"}],
                [{"text": "PEOPLE", "callback_data": f"analyze_PEOPLEUSDT"}, {"text": "MATIC", "callback_data": f"analyze_MATICUSDT"}],
                [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "market_analysis"}]
            ]
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = {"state": "selecting_analysis_symbol"}
        
        return self.send_message(message, reply_markup=keyboard)
    
    def send_analysis_results(self, symbol: str, signals: list) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            if not signals:
                message = f"""üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê {symbol}

‚ùå –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª –∏–ª–∏ –≤—Ä–µ–º—è."""
                return self.send_message(message)
            
            message = f"""üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê {symbol}

üìä –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}

"""
            
            for i, signal in enumerate(signals[:3], 1):
                confidence_percent = signal.confidence * 100
                rr_ratio = signal.risk_reward_ratio
                
                message += f"""üéØ –°–ò–ì–ù–ê–õ #{i}

üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal.direction}
üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal.entry_price:.6f}
üí∞ Take Profit: {signal.take_profit:.6f}
üõë Stop Loss: {signal.stop_loss:.6f}
üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_percent:.1f}%
‚öñÔ∏è –†–∏—Å–∫/–ü—Ä–∏–±—ã–ª—å: 1:{rr_ratio:.2f}
üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal.strategy}
üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {signal.reasoning}

"""
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª", "callback_data": f"add_best_signal_{symbol}"}],
                    [{"text": "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–Ω–µ—Ç—É", "callback_data": "analyze_symbol"}],
                    [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "market_analysis"}]
                ]
            }
            
            return self.send_message(message, reply_markup=keyboard)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return False
    
    def send_all_analysis_results(self, all_results: dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç"""
        try:
            if not all_results:
                message = """üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –í–°–ï–• –ú–û–ù–ï–¢

‚ùå –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."""
                return self.send_message(message)
            
            message = """üîç –õ–£–ß–®–ò–ï –°–ò–ì–ù–ê–õ–´ –†–´–ù–ö–ê

"""
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            all_signals = []
            for symbol, signals in all_results.items():
                for signal in signals:
                    all_signals.append((symbol, signal))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            all_signals.sort(key=lambda x: x[1].confidence, reverse=True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
            for i, (symbol, signal) in enumerate(all_signals[:5], 1):
                confidence_percent = signal.confidence * 100
                rr_ratio = signal.risk_reward_ratio
                
                message += f"""üéØ #{i} {symbol}

üìà {signal.direction} | üíµ {signal.entry_price:.6f}
üí∞ TP: {signal.take_profit:.6f} | üõë SL: {signal.stop_loss:.6f}
üìä {confidence_percent:.1f}% | ‚öñÔ∏è 1:{rr_ratio:.2f}
üéØ {signal.strategy}

"""
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª", "callback_data": f"add_best_signal_{all_signals[0][0] if all_signals else ''}"}],
                    [{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑", "callback_data": "analyze_all"}],
                    [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "market_analysis"}]
                ]
            }
            
            return self.send_message(message, reply_markup=keyboard)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç: {e}")
            return False
    
    def handle_callback_query(self, callback_data: str, user_id: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback query –æ—Ç –∫–Ω–æ–ø–æ–∫"""
        try:
            if callback_data == "add_trade":
                return self.send_symbol_selection(user_id)
            
            elif callback_data == "market_analysis":
                return self.send_market_analysis_menu()
            
            elif callback_data == "analyze_all":
                # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
                if not self.market_analyzer:
                    return self.send_message("‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                try:
                    self.send_message("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–æ–Ω–µ—Ç—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
                    all_results = self.market_analyzer.analyze_all_symbols()
                    return self.send_all_analysis_results(all_results)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç: {e}")
                    return self.send_message(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            
            elif callback_data == "analyze_symbol":
                return self.send_symbol_analysis_selection(user_id)
            
            elif callback_data == "best_signals":
                # –õ—É—á—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã (–∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –∏ –ø–æ–∫–∞–∑ —Ç–æ–ø-5)
                if not self.market_analyzer:
                    return self.send_message("‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                try:
                    self.send_message("üîç –ò—â–µ–º –ª—É—á—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
                    all_results = self.market_analyzer.analyze_all_symbols()
                    return self.send_all_analysis_results(all_results)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
                    return self.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            
            elif callback_data == "back_to_main":
                return self.send_add_trade_menu()
            
            elif callback_data.startswith("analyze_"):
                symbol = callback_data.replace("analyze_", "")
                # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
                if not self.market_analyzer:
                    return self.send_message("‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                try:
                    self.send_message(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {symbol}...")
                    signals = self.market_analyzer.analyze_symbol(symbol)
                    return self.send_analysis_results(symbol, signals)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                    return self.send_message(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            
            elif callback_data.startswith("add_best_signal_"):
                symbol = callback_data.replace("add_best_signal_", "")
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                if not self.market_analyzer:
                    return self.send_message("‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                try:
                    signals = self.market_analyzer.analyze_symbol(symbol)
                    if not signals:
                        return self.send_message(f"‚ùå –î–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤")
                    
                    # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª
                    best_signal = signals[0]
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                    trade_data = {
                        "symbol": best_signal.symbol,
                        "direction": best_signal.direction,
                        "entry_price": str(best_signal.entry_price),
                        "exit_price": str(best_signal.take_profit),
                        "stop_loss": str(best_signal.stop_loss)
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
                    success = self.add_trade_to_sheet(trade_data)
                    
                    if success:
                        message = f"""‚úÖ –õ–£–ß–®–ò–ô –°–ò–ì–ù–ê–õ –î–û–ë–ê–í–õ–ï–ù!

ü™ô –°–∏–º–≤–æ–ª: {best_signal.symbol}
üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {best_signal.direction}
üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {best_signal.entry_price:.6f}
üí∞ Take Profit: {best_signal.take_profit:.6f}
üõë Stop Loss: {best_signal.stop_loss:.6f}
üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {best_signal.confidence*100:.1f}%
üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {best_signal.strategy}
üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {best_signal.reasoning}

–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google —Ç–∞–±–ª–∏—Ü—É!"""
                    else:
                        message = "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤ —Ç–∞–±–ª–∏—Ü—É"
                    
                    return self.send_message(message)
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
                    return self.send_message(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
            
            elif callback_data == "status":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
                status_data = {
                    "processed_signals": 0,
                    "open_positions": 0,
                    "max_positions": 5,
                    "last_check": datetime.now().strftime("%H:%M:%S")
                }
                return self.send_status(status_data)
            
            elif callback_data == "testnet_status":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏
                try:
                    if hasattr(self, 'signal_processor') and self.signal_processor:
                        self.signal_processor.send_testnet_status()
                        return True
                    else:
                        return self.send_message("‚ùå –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏: {e}")
                    return self.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            elif callback_data == "balance":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
                try:
                    if hasattr(self, 'signal_processor') and self.signal_processor:
                        balance = self.signal_processor.bybit.get_balance()
                        if balance:
                            message = f"üí∞ –ë–ê–õ–ê–ù–° –¢–ï–°–¢–û–í–û–ì–û –ê–ö–ö–ê–£–ù–¢–ê\n\n"
                            message += f"üíµ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {balance.get('totalWalletBalance', 'N/A')} USDT\n"
                            message += f"üí∏ –î–æ—Å—Ç—É–ø–Ω–æ: {balance.get('availableToWithdraw', 'N/A')} USDT\n"
                            message += f"üìä –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: {balance.get('totalPnl', 'N/A')} USDT\n"
                            message += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                        else:
                            message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å"
                        
                        return self.send_message(message)
                    else:
                        return self.send_message("‚ùå –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
                    return self.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            elif callback_data.startswith("symbol_"):
                symbol = callback_data.replace("symbol_", "")
                return self.send_direction_selection(user_id, symbol)
            
            elif callback_data.startswith("direction_"):
                direction = callback_data.replace("direction_", "")
                if user_id in self.user_states:
                    symbol = self.user_states[user_id].get("symbol", "")
                    return self.send_price_input(user_id, symbol, direction)
            
            elif callback_data == "confirm_trade":
                if user_id in self.user_states and "trade_data" in self.user_states[user_id]:
                    trade_data = self.user_states[user_id]["trade_data"]
                    success = self.add_trade_to_sheet(trade_data)
                    
                    if success:
                        message = f"""‚úÖ –°–î–ï–õ–ö–ê –î–û–ë–ê–í–õ–ï–ù–ê!

ü™ô –°–∏–º–≤–æ–ª: {trade_data['symbol']}
üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trade_data['direction']}
üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {trade_data['entry_price']}
üí∞ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {trade_data['exit_price']}
üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {trade_data['stop_loss']}

–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google —Ç–∞–±–ª–∏—Ü—É!"""
                    else:
                        message = "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É"
                    
                    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if user_id in self.user_states:
                        del self.user_states[user_id]
                    
                    return self.send_message(message)
            
            elif callback_data == "cancel":
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_id in self.user_states:
                    del self.user_states[user_id]
                
                return self.send_message("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            return False
    
    def handle_text_message(self, text: str, user_id: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            if user_id not in self.user_states:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
                if text.lower() in ["/start", "/add", "–¥–æ–±–∞–≤–∏—Ç—å", "—Å–¥–µ–ª–∫–∞"]:
                    return self.send_add_trade_menu()
                elif text.lower() in ["/status", "—Å—Ç–∞—Ç—É—Å"]:
                    status_data = {
                        "processed_signals": 0,
                        "open_positions": 0,
                        "max_positions": 5,
                        "last_check": datetime.now().strftime("%H:%M:%S")
                    }
                    return self.send_status(status_data)
                else:
                    return self.send_message("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏–ª–∏ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–¥–µ–ª–∫–∏
            state = self.user_states[user_id].get("state", "")
            
            if state == "entering_entry_price":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞
                if self.is_valid_price(text):
                    symbol = self.user_states[user_id].get("symbol", "")
                    direction = self.user_states[user_id].get("direction", "")
                    return self.send_exit_price_input(user_id, symbol, direction, text)
                else:
                    return self.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.33591)")
            
            elif state == "entering_exit_price":
                if self.is_valid_price(text):
                    symbol = self.user_states[user_id].get("symbol", "")
                    direction = self.user_states[user_id].get("direction", "")
                    entry_price = self.user_states[user_id].get("entry_price", "")
                    return self.send_stop_loss_input(user_id, symbol, direction, entry_price, text)
                else:
                    return self.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.34001)")
            
            elif state == "entering_stop_loss":
                if self.is_valid_price(text):
                    symbol = self.user_states[user_id].get("symbol", "")
                    direction = self.user_states[user_id].get("direction", "")
                    entry_price = self.user_states[user_id].get("entry_price", "")
                    exit_price = self.user_states[user_id].get("exit_price", "")
                    
                    trade_data = {
                        "symbol": symbol,
                        "direction": direction,
                        "entry_price": entry_price,
                        "exit_price": exit_price,
                        "stop_loss": text
                    }
                    
                    return self.send_trade_confirmation(user_id, trade_data)
                else:
                    return self.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.33181)")
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def is_valid_price(self, price_str: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ü–µ–Ω–æ–π"""
        try:
            price = float(price_str.replace(",", "."))
            return price > 0
        except:
            return False
    
    def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            url = f"{self.base_url}/getMe"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                bot_info = response.json()
                self.logger.info(f"‚úÖ Telegram Bot –ø–æ–¥–∫–ª—é—á–µ–Ω: {bot_info.get('result', {}).get('username', 'Unknown')}")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {response.status_code}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {e}")
            return False 

    def get_updates(self, offset=0, timeout=10):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ getUpdates"""
        try:
            url = f"{self.base_url}/getUpdates"
            params = {'timeout': timeout, 'offset': offset}
            response = requests.get(url, params=params, timeout=timeout+5)
            if response.status_code == 200:
                return response.json().get('result', [])
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ getUpdates: {response.status_code}")
                return []
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ getUpdates: {e}")
            return []

    def run_polling(self, poll_interval=1):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å polling-—Ü–∏–∫–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram"""
        self.logger.info("üö¶ –ó–∞–ø—É—Å–∫ polling Telegram...")
        offset = 0
        while True:
            updates = self.get_updates(offset)
            for update in updates:
                offset = update['update_id'] + 1
                if 'message' in update:
                    user_id = str(update['message']['from']['id'])
                    text = update['message'].get('text', '')
                    if text:
                        self.handle_text_message(text, user_id)
                elif 'callback_query' in update:
                    user_id = str(update['callback_query']['from']['id'])
                    data = update['callback_query']['data']
                    self.handle_callback_query(data, user_id)
            time.sleep(poll_interval) 