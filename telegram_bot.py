#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Telegram Bot –¥–ª—è Google Signals Bot
"""

import logging
import requests
from typing import Optional

class TelegramBot:
    def __init__(self, bot_token: str, chat_id: str):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.logger = logging.getLogger(__name__)
        
        self.logger.info("‚úÖ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def send_message(self, message: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': parse_mode
            }
            
            response = requests.post(url, data=data, timeout=10)
            
            if response.status_code == 200:
                self.logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code} {response.text}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    def send_error(self, error_message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        message = f"‚ùå –û–®–ò–ë–ö–ê –ë–û–¢–ê:\n\n{error_message}"
        return self.send_message(message)
    
    def send_status(self, status_data: dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            message = f"""ü§ñ –°–¢–ê–¢–£–° –ë–û–¢–ê

üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {status_data.get('processed_signals', 0)}
üìà –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {status_data.get('open_positions', 0)}
üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {status_data.get('last_check', 'N/A')}

‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"""
            
            return self.send_message(message)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    def send_position_update(self, position_data: dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            message = f"""üìä –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò

ü™ô –ú–æ–Ω–µ—Ç–∞: {position_data.get('symbol', 'N/A')}
üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {position_data.get('side', 'N/A')}
üí∞ –†–∞–∑–º–µ—Ä: {position_data.get('size', 'N/A')}
üíµ PnL: {position_data.get('pnl', 'N/A')}
üìä ROI: {position_data.get('roi', 'N/A')}%"""
            
            return self.send_message(message)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False
    
    def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            url = f"{self.base_url}/getMe"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                bot_info = response.json()
                self.logger.info(f"‚úÖ Telegram Bot –ø–æ–¥–∫–ª—é—á–µ–Ω: {bot_info.get('result', {}).get('username', 'Unknown')}")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {response.status_code}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {e}")
            return False 