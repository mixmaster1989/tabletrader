#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ —á–µ—Ä–µ–∑ Telegram
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_telegram_bot_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞...")
    
    try:
        from telegram_bot import TelegramBot
        from config import load_config
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –±–µ–∑ Google Sheets API –¥–ª—è —Ç–µ—Å—Ç–∞
        bot = TelegramBot(
            bot_token=config.get('TELEGRAM_BOT_TOKEN'),
            chat_id=config.get('TELEGRAM_CHAT_ID')
        )
        
        print("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
        return False

def test_webhook_server():
    """–¢–µ—Å—Ç –≤–µ–±-—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        from telegram_webhook import create_webhook_server
        from telegram_bot import TelegramBot
        from config import load_config
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = TelegramBot(
            bot_token=config.get('TELEGRAM_BOT_TOKEN'),
            chat_id=config.get('TELEGRAM_CHAT_ID')
        )
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä
        webhook_server = create_webhook_server(bot, port=5001)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        
        print("‚úÖ –í–µ–±-—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

def test_trade_data_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∏...")
    
    try:
        from telegram_bot import TelegramBot
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        bot = TelegramBot("test_token", "test_chat_id")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ü–µ–Ω
        test_cases = [
            ("0.33591", True),
            ("0,33591", True),  # –ó–∞–ø—è—Ç–∞—è
            ("335.91", True),
            ("abc", False),
            ("", False),
            ("0", False),
            ("-1", False)
        ]
        
        for price, expected in test_cases:
            result = bot.is_valid_price(price)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"{status} –¶–µ–Ω–∞ '{price}' -> {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
            
            if result != expected:
                return False
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False

def test_pnl_calculation():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ P&L"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ P&L...")
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_cases = [
            # (entry_price, exit_price, direction, expected_pnl)
            (100, 110, "LONG", 10.0),    # +10%
            (100, 90, "LONG", -10.0),    # -10%
            (100, 90, "SHORT", 10.0),    # +10%
            (100, 110, "SHORT", -10.0),  # -10%
            (0.33591, 0.34001, "LONG", 1.22),  # –ü—Ä–∏–º–µ—Ä –∏–∑ –ª–æ–≥–æ–≤
        ]
        
        for entry, exit, direction, expected in test_cases:
            if direction == "LONG":
                pnl = ((exit - entry) / entry) * 100
            else:  # SHORT
                pnl = ((entry - exit) / entry) * 100
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
            pnl = round(pnl, 2)
            expected = round(expected, 2)
            
            status = "‚úÖ" if abs(pnl - expected) < 0.01 else "‚ùå"
            print(f"{status} {direction}: {entry} -> {exit} = {pnl}% (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected}%)")
            
            if abs(pnl - expected) >= 0.01:
                return False
        
        print("‚úÖ –†–∞—Å—á–µ—Ç P&L —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ P&L: {e}")
        return False

def test_google_sheets_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets...")
    
    try:
        from google_sheets_api import GoogleSheetsAPI
        from config import load_config
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
        sheets_api = GoogleSheetsAPI(
            credentials_file=config.get('GOOGLE_CREDENTIALS_FILE'),
            spreadsheet_id=config.get('GOOGLE_SPREADSHEET_ID')
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏
        next_row = sheets_api.get_next_row_number()
        print(f"‚úÖ –°–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {next_row}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals = sheets_api.read_signals()
        print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM TRADE –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò\n")
    
    tests = [
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞", test_telegram_bot_initialization),
        ("–í–µ–±-—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä", test_webhook_server),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∏", test_trade_data_validation),
        ("–†–∞—Å—á–µ—Ç P&L", test_pnl_calculation),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets", test_google_sheets_integration),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"–¢–ï–°–¢: {test_name}")
        print(f"{'='*50}")
        
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print(f"\n{'='*50}")
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    print(f"{'='*50}")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 