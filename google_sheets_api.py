#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Google Sheets API –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import logging
from typing import List, Dict, Optional
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import time

class GoogleSheetsAPI:
    def __init__(self, credentials_file: str, spreadsheet_id: str):
        self.credentials_file = credentials_file
        self.spreadsheet_id = spreadsheet_id
        self.service = None
        self.logger = logging.getLogger(__name__)
        
        # –û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Google Sheets
        self.SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']
        
        self._initialize_service()
    
    def _initialize_service(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API"""
        try:
            credentials = Credentials.from_service_account_file(
                self.credentials_file, scopes=self.SCOPES
            )
            self.service = build('sheets', 'v4', credentials=credentials)
            self.logger.info("‚úÖ Google Sheets API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets API: {e}")
            raise
    
    def read_signals(self, range_name: str = "A:E") -> List[Dict]:
        """
        –ß–∏—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
        
        –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏:
        A - –ú–æ–Ω–µ—Ç–∞ (BTCUSDT)
        B - –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ (50000)
        C - Take Profit (52000)
        D - Stop Loss (48000)
        E - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (LONG/SHORT)
        """
        try:
            result = self.service.spreadsheets().values().get(
                spreadsheetId=self.spreadsheet_id,
                range=range_name
            ).execute()
            
            values = result.get('values', [])
            
            if not values:
                self.logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
                return []
            
            signals = []
            for i, row in enumerate(values[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                try:
                    if len(row) >= 5:  # –ú–∏–Ω–∏–º—É–º 5 –∫–æ–ª–æ–Ω–æ–∫
                        signal = {
                            'row': i,
                            'symbol': row[0].strip().upper(),
                            'entry_price': float(row[1]),
                            'take_profit': float(row[2]),
                            'stop_loss': float(row[3]),
                            'direction': row[4].strip().upper(),
                            'status': 'new'  # –°—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                        }
                        
                        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
                        if self._validate_signal(signal):
                            signals.append(signal)
                        else:
                            self.logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª –≤ —Å—Ç—Ä–æ–∫–µ {i}: {row}")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ {i}: {row}")
                        
                except (ValueError, IndexError) as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                    continue
            
            self.logger.info(f"üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã")
            return signals
            
        except HttpError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets API: {e}")
            return []
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return []
    
    def _validate_signal(self, signal: Dict) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∞
            if not signal['symbol'] or len(signal['symbol']) < 3:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω
            if signal['entry_price'] <= 0:
                return False
            if signal['take_profit'] <= 0:
                return False
            if signal['stop_loss'] <= 0:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if signal['direction'] not in ['LONG', 'SHORT']:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ TP/SL
            if signal['direction'] == 'LONG':
                if signal['take_profit'] <= signal['entry_price']:
                    return False
                if signal['stop_loss'] >= signal['entry_price']:
                    return False
            else:  # SHORT
                if signal['take_profit'] >= signal['entry_price']:
                    return False
                if signal['stop_loss'] <= signal['entry_price']:
                    return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
    
    def mark_signal_processed(self, row: int, status: str = "processed"):
        """–û—Ç–º–µ—Ç–∏—Ç—å —Å–∏–≥–Ω–∞–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–∏—Å–∞—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –∏–ª–∏ –ª–∏—Å—Ç
            self.logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª –≤ —Å—Ç—Ä–æ–∫–µ {row} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ {status}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
    
    def get_last_update_time(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            result = self.service.spreadsheets().get(
                spreadsheetId=self.spreadsheet_id,
                ranges=[],
                includeGridData=False
            ).execute()
            
            return result.get('properties', {}).get('modifiedTime')
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return None 