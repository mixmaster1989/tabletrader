#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Google Sheets API –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

from datetime import datetime, timedelta
import logging
from typing import List, Dict, Optional
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import time
import json

class GoogleSheetsAPI:
    def __init__(self, credentials_file: str, spreadsheet_id: str, pos_size: float, leverage: int):
        self.credentials_file = credentials_file
        self.spreadsheet_id = spreadsheet_id
        self.service = None
        self.logger = logging.getLogger(__name__)
        
        # –û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Google Sheets
        self.SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']
        
        self._initialize_service()
        self.pos_size = pos_size
        self.leverage = leverage    
    
    def _initialize_service(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API"""
        try:
            credentials = Credentials.from_service_account_file(
                self.credentials_file, scopes=self.SCOPES
            )
            self.service = build('sheets', 'v4', credentials=credentials)
            self.logger.info("‚úÖ Google Sheets API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets API: {e}")
            raise
    
    def read_signals(self, range_name: str = "'Trades'!B:M") -> List[Dict]:
        """
        –ß–∏—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
        
        –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏:
        B - –í—Ä–µ–º—è –≤—Ö–æ–¥–∞
        C - –°–∏–º–≤–æ–ª
        D - –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
        E - –°—Ç–æ—Ä–æ–Ω–∞
        F - –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞
        G - –ü–ª–µ—á–æ
        H - –¶–µ–Ω–∞ —Å—Ç–æ–ø –ª–æ—Å–∞
        I - –†–∞–∑–º–µ—Ä
        J - –ü—Ä–∏–±—ã–ª—å
        K - –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞
        L - –¢–µ–π–∫ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        M - –°—Ç–æ–ø –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        """
        try:
            result = self.service.spreadsheets().values().get(
                spreadsheetId=self.spreadsheet_id,
                range=range_name
            ).execute()

            try:
                with open('google_sheets_data.json', 'w', encoding='utf-8') as f:
                    json.dump(result, f, ensure_ascii=False, indent=4)
                self.logger.info("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ google_sheets_data.json")
            except Exception as e:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª: {e}")
            
            values = result.get('values', [])
            
            if not values:
                self.logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
                return []
            
            signals = []
            for i, row in enumerate(values[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                try:
                    if len(row) >= 8:
                        date_format = "%d.%m.%Y %H:%M"
                        parsed_date = datetime.strptime(row[0].strip(), date_format)

                        signal = {
                            'row': i,
                            'date': parsed_date,
                            'symbol': row[1].strip().upper(),
                            'entry_price': float(row[2].replace(',', '.').split('/')[0].strip()),
                            'direction': row[3].strip().upper(),
                            'take_profit': float(row[4].replace(',', '.').split('/')[0].strip()),
                            'leverage': int(row[5].replace('X', '').strip()),
                            'stop_loss': float(row[6].replace(',', '.').split('/')[0].strip()),
                            'size': float(row[7].replace(',', '.').split('/')[0].strip()),
                            'status': 'new'  # –°—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                        }
                        
                        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
                        error = self._validate_signal(signal)

                        if error == "":
                            signals.append(signal)
                        else:
                            self.logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª –≤ —Å—Ç—Ä–æ–∫–µ {i}: signal: {signal} raw: {row}")
                            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {error}")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ {i}: raw: {row}")
                        
                except (ValueError, IndexError) as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                    continue
            
            self.logger.info(f"üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã")
            return signals
            
        except HttpError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets API: {e}")
            return []
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return []
    
    def _validate_signal(self, signal: Dict) -> str:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
        :param signal: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞
        {
            'row': int,
            'date': datetime,
            'symbol': str,
            'entry_price': float,
            'direction': str,
            'take_profit': float,
            'leverage': int,
            'stop_loss': float,
            'size': float,
            'status': str
        }
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∞
            if type(signal['row']) != int:
                return "–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º"

            if type(signal['date']) != datetime:
                return "–î–∞—Ç–∞ –≤—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å datetime"

            if type(signal['symbol']) != str:
                return "–°–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
            if len(signal['symbol']) < 3:
                return "–°–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤"

            if type(signal['entry_price']) != float:
                return "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
            if signal['entry_price'] <= 0:
                return "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"

            if signal['direction'] not in ['LONG', 'SHORT']:
                return "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å LONG –∏–ª–∏ SHORT"

            if type(signal['take_profit']) != float:
                return "Take Profit –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
            if signal['take_profit'] <= 0:
                return "Take Profit –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"

            if type(signal['leverage']) != int:
                return "–ü–ª–µ—á–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º"
            if signal['leverage'] <= 0:
                return "–ü–ª–µ—á–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"

            if type(signal['stop_loss']) != float:
                return "Stop Loss –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
            if signal['stop_loss'] <= 0:
                return "Stop Loss –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"

            if type(signal['size']) != float:
                return "–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
            if signal['size'] <= 0:
                return "–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0"

            return ""
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"
    
    def mark_signal_processed(self, row: int, status: str = "processed"):
        """–û—Ç–º–µ—Ç–∏—Ç—å —Å–∏–≥–Ω–∞–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–∏—Å–∞—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –∏–ª–∏ –ª–∏—Å—Ç
            self.logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª –≤ —Å—Ç—Ä–æ–∫–µ {row} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ {status}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
    
    def get_last_update_time(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            result = self.service.spreadsheets().get(
                spreadsheetId=self.spreadsheet_id,
                ranges=[],
                includeGridData=False
            ).execute()
            
            return result.get('properties', {}).get('modifiedTime')
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return None 