#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Google Sheets API –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import logging
from typing import List, Dict, Optional
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import time
from utils import get_bybit_symbol

class GoogleSheetsAPI:
    def __init__(self, credentials_file: str, spreadsheet_id: str, bybit_api=None):
        self.credentials_file = credentials_file
        self.spreadsheet_id = spreadsheet_id
        self.bybit_api = bybit_api
        self.service = None
        self.logger = logging.getLogger(__name__)
        
        # –û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Google Sheets
        self.SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
        
        self._initialize_service()
    
    def _initialize_service(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API"""
        try:
            credentials = Credentials.from_service_account_file(
                self.credentials_file, scopes=self.SCOPES
            )
            self.service = build('sheets', 'v4', credentials=credentials)
            self.logger.info("‚úÖ Google Sheets API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets API: {e}")
            raise
    
    def read_signals(self, range_name: str = "Trades!A:Q") -> List[Dict]:
        """
        –ß–∏—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
        
        –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏:
        A - –ú–æ–Ω–µ—Ç–∞ (BTCUSDT)
        B - –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ (50000)
        C - Take Profit (52000)
        D - Stop Loss (48000)
        E - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (LONG/SHORT)
        """
        try:
            self.logger.info(f"üìä –ß–∏—Ç–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω: {range_name}")
            self.logger.info(f"üìä ID —Ç–∞–±–ª–∏—Ü—ã: {self.spreadsheet_id}")
            
            result = self.service.spreadsheets().values().get(
                spreadsheetId=self.spreadsheet_id,
                range=range_name
            ).execute()
            
            self.logger.info(f"üîç –°–´–†–´–ï –î–ê–ù–ù–´–ï –û–¢ GOOGLE: {result}")
            
            values = result.get('values', [])
            
            self.logger.info(f"üîç –í–°–ï –°–¢–†–û–ö–ò: {values}")
            self.logger.info(f"üîç –ö–û–õ–ò–ß–ï–°–¢–í–û –°–¢–†–û–ö: {len(values)}")
            
            if not values:
                self.logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
                return []
            
            signals = []
            self.logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(values)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
            for i, row in enumerate(values, start=1):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 1 —Å—Ç—Ä–æ–∫–∏
                self.logger.info(f"üîç –°—Ç—Ä–æ–∫–∞ {i}: {row} (–∫–æ–ª–æ–Ω–æ–∫: {len(row)})")
                try:
                    self.logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É {i}: {row}")
                    self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ len(row) >= 7: {len(row)} >= 7 = {len(row) >= 7}")
                    if len(row) >= 7:  # –ú–∏–Ω–∏–º—É–º 7 –∫–æ–ª–æ–Ω–æ–∫ (A:G)
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        if (not row[1] or row[1].strip() == '' or 
                            row[1].strip().lower() in ['–º–æ–Ω–µ—Ç–∞', '–¥–∞—Ç–∞ –≤—Ö–æ–¥–∞', '–¥–∞—Ç–∞', '—Å–∏–º–≤–æ–ª', '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] or
                            row[1].strip().isdigit() == False and len(row[1].strip()) < 3):
                            self.logger.info(f"üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É {i} - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –ø—É—Å—Ç–∞—è")
                            continue
                            
                        self.logger.info(f"üîç –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {i}")
                        signal = {
                            'row': i,
                            'entry_date': row[1].strip() if len(row) > 1 and row[1] else '',
                            'symbol': row[2].strip().upper() if len(row) > 2 and row[2] else '',
                            'entry_price': float(row[3].replace(',', '.')) if len(row) > 3 and row[3] else 0,
                            'direction': row[4].strip().upper() if len(row) > 4 and row[4] else '',
                            'exit_price': float(row[5].replace(',', '.')) if len(row) > 5 and row[5] else 0,
                            'stop_loss': float(row[7].replace(',', '.')) if len(row) > 7 and row[7] else 0,
                            'status': 'new'
                        }
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
                        if signal['exit_price'] > 0:
                            signal['status'] = 'closed'
                            signal['profit_loss'] = self._calculate_pnl(signal)
                            self.logger.info(f"üîç –ó–∞–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞: {signal['symbol']} {signal['direction']} - –≤—ã—Ö–æ–¥: {signal['exit_price']}, P&L: {signal['profit_loss']}")
                        else:
                            signal['status'] = 'open'
                            self.logger.info(f"üîç –û–¢–ö–†–´–¢–ê–Ø —Å–¥–µ–ª–∫–∞: {signal['symbol']} {signal['direction']} - –≤—Ö–æ–¥: {signal['entry_price']}")
                        
                        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        self.logger.info(f"üîç –°—Ç—Ä–æ–∫–∞ {i}: {signal}")
                        
                        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
                        if self._validate_signal(signal):
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–∫–µ—Ä –¥–ª—è Bybit
                            bybit_symbol = get_bybit_symbol(signal['symbol'])
                            if not bybit_symbol:
                                self.logger.error(f"‚ùå –ù–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {signal['symbol']} ‚Äî —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω")
                                continue
                            signal['bybit_symbol'] = bybit_symbol
                            signals.append(signal)
                            self.logger.info(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {signal['symbol']} {signal['direction']}")
                        else:
                            self.logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª –≤ —Å—Ç—Ä–æ–∫–µ {i}: {signal}")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ {i} (–∫–æ–ª–æ–Ω–æ–∫: {len(row)}): {row}")
                        self.logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {i} –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É len(row) >= 7")
                        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏
                        if len(row) >= 3 and row[1] and not row[1].strip().isdigit():
                            self.logger.info(f"üîç –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ {i}: {row}")
                        
                except (ValueError, IndexError) as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                    continue
            
            self.logger.info(f"üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã")
            return signals
            
        except HttpError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets API: {e}")
            return []
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return []
    
    def _validate_signal(self, signal: Dict) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∞
            if not signal['symbol'] or len(signal['symbol']) < 3:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
            if signal['entry_price'] <= 0:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if signal['direction'] not in ['LONG', 'SHORT']:
                return False
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ (–æ—Ç–∫—Ä—ã—Ç—ã–µ –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ)
            # if signal['status'] == 'closed':
            #     return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            if signal['stop_loss'] <= 0:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            if signal['direction'] == 'LONG':
                if signal['stop_loss'] >= signal['entry_price']:
                    return False
            else:  # SHORT
                if signal['stop_loss'] <= signal['entry_price']:
                    return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
    
    def mark_signal_processed(self, row: int, status: str = "processed"):
        """–û—Ç–º–µ—Ç–∏—Ç—å —Å–∏–≥–Ω–∞–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–∏—Å–∞—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –∏–ª–∏ –ª–∏—Å—Ç
            self.logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª –≤ —Å—Ç—Ä–æ–∫–µ {row} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ {status}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
    
    def _calculate_pnl(self, signal: Dict) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ –ø–æ —Å–¥–µ–ª–∫–µ"""
        try:
            entry_price = signal['entry_price']
            exit_price = signal['exit_price']
            direction = signal['direction']
            
            if direction == 'LONG':
                return ((exit_price - entry_price) / entry_price) * 100
            else:  # SHORT
                return ((entry_price - exit_price) / entry_price) * 100
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ P&L: {e}")
            return 0.0
    
    def get_current_price(self, signal: Dict) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ Bybit API"""
        try:
            symbol = signal.get('bybit_symbol', signal.get('symbol'))
            if self.bybit_api:
                price = self.bybit_api.get_last_price(symbol)
                return float(price) if price else 0.0
            return 0.0
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
            return 0.0
    
    def backtest_signal(self, signal: Dict) -> Dict:
        """–ë—ç–∫—Ç–µ—Å—Ç —Å–∏–≥–Ω–∞–ª–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏"""
        try:
            current_price = self.get_current_price(signal)
            if current_price == 0:
                return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É'}
            
            # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ P&L –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
            if signal['status'] == 'open':
                entry_price = signal['entry_price']
                direction = signal['direction']
                
                if direction == 'LONG':
                    current_pnl = ((current_price - entry_price) / entry_price) * 100
                else:  # SHORT
                    current_pnl = ((entry_price - current_price) / entry_price) * 100
                
                signal['current_price'] = current_price
                signal['current_pnl'] = current_pnl
            
            return {'success': True, 'signal': signal}
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
            return {'success': False, 'error': str(e)}
    
    def get_last_update_time(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Ç–∞—Ç—å –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π —è—á–µ–π–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            return None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return None
    
    def get_next_row_number(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        try:
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞
            range_name = "Trades!A:A"
            result = self.service.spreadsheets().values().get(
                spreadsheetId=self.spreadsheet_id,
                range=range_name
            ).execute()
            
            values = result.get('values', [])
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä –≤ –∫–æ–ª–æ–Ω–∫–µ A
            last_number = 0
            for row in values:
                if row and row[0].strip().isdigit():
                    try:
                        number = int(row[0])
                        if number > last_number:
                            last_number = number
                    except ValueError:
                        continue
            
            return last_number + 1
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
            return 1
    
    def add_trade_row(self, row_data: List[str]) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å —Å–¥–µ–ª–∫–æ–π –≤ —Ç–∞–±–ª–∏—Ü—É"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
            range_name = "Trades!A:A"
            result = self.service.spreadsheets().values().get(
                spreadsheetId=self.spreadsheet_id,
                range=range_name
            ).execute()
            
            values = result.get('values', [])
            next_row = len(values) + 1
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏
            write_range = f"Trades!A{next_row}:K{next_row}"
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            body = {
                'values': [row_data]
            }
            
            result = self.service.spreadsheets().values().update(
                spreadsheetId=self.spreadsheet_id,
                range=write_range,
                valueInputOption='USER_ENTERED',
                body=body
            ).execute()
            
            self.logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫—É {next_row}: {row_data}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            return False
    
    def update_trade_status(self, row: int, status: str, pnl: str = "") -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ –∏ P&L"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–æ–ª–æ–Ω–∫–µ J (P&L)
            range_name = f"Trades!J{row}"
            
            body = {
                'values': [[pnl]]
            }
            
            result = self.service.spreadsheets().values().update(
                spreadsheetId=self.spreadsheet_id,
                range=range_name,
                valueInputOption='USER_ENTERED',
                body=body
            ).execute()
            
            self.logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ {row} –æ–±–Ω–æ–≤–ª–µ–Ω: {status}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏: {e}")
            return False
    
    def get_trade_by_row(self, row: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–æ–∫–∏"""
        try:
            range_name = f"Trades!A{row}:K{row}"
            
            result = self.service.spreadsheets().values().get(
                spreadsheetId=self.spreadsheet_id,
                range=range_name
            ).execute()
            
            values = result.get('values', [])
            
            if not values or not values[0]:
                return None
            
            row_data = values[0]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∏
            trade = {
                'row': row,
                'number': row_data[0] if len(row_data) > 0 else '',
                'entry_date': row_data[1] if len(row_data) > 1 else '',
                'symbol': row_data[2] if len(row_data) > 2 else '',
                'entry_price': float(row_data[3].replace(',', '.')) if len(row_data) > 3 and row_data[3] else 0,
                'direction': row_data[4] if len(row_data) > 4 else '',
                'exit_price': float(row_data[5].replace(',', '.')) if len(row_data) > 5 and row_data[5] else 0,
                'leverage': row_data[6] if len(row_data) > 6 else '',
                'stop_loss': float(row_data[7].replace(',', '.')) if len(row_data) > 7 and row_data[7] else 0,
                'position_size': row_data[8] if len(row_data) > 8 else '',
                'pnl': row_data[9] if len(row_data) > 9 else '',
                'exit_date': row_data[10] if len(row_data) > 10 else ''
            }
            
            return trade
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ {row}: {e}")
            return None 