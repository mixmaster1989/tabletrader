#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Telegram –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º
"""

import logging
import json
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
from signal_processor import SignalProcessor, OrderStatus

class TelegramController:
    def __init__(self, bot_token: str, chat_id: str, signal_processor: SignalProcessor):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.signal_processor = signal_processor
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.updater = Updater(bot_token, use_context=True)
        self.dispatcher = self.updater.dispatcher
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
        self.logger.info("‚úÖ Telegram Controller –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dispatcher.add_handler(CommandHandler("start", self._start_command))
        self.dispatcher.add_handler(CommandHandler("menu", self._show_main_menu))
        self.dispatcher.add_handler(CommandHandler("status", self._show_status))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        self.dispatcher.add_handler(CallbackQueryHandler(self._button_callback))
    
    def _start_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        self._show_main_menu(update, context)
    
    def _show_main_menu(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [
                InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="start_bot"),
                InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="stop_bot")
            ],
            [
                InlineKeyboardButton("üõë –í—ã–∫–ª—é—á–∏—Ç—å + –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞", callback_data="stop_cancel_all")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="show_status"),
                InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞", callback_data="show_orders")
            ],
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = """
ü§ñ **–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
‚Ä¢ üü¢ **–í–∫–ª—é—á–∏—Ç—å** - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
‚Ä¢ üî¥ **–í—ã–∫–ª—é—á–∏—Ç—å** - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
‚Ä¢ üõë **–í—ã–∫–ª—é—á–∏—Ç—å + –æ—Ç–º–µ–Ω–∏—Ç—å** - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞
‚Ä¢ üìä **–°—Ç–∞—Ç—É—Å** - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
‚Ä¢ üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞** - —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã
        """
        
        if update.callback_query:
            update.callback_query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            update.message.reply_text(
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    def _show_status(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            status = self.signal_processor.get_status()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            active_orders = []
            for signal_id, signal_data in self.signal_processor.processed_signals.items():
                if signal_data.get('status') == OrderStatus.PLACED.value:
                    active_orders.append({
                        'id': signal_id,
                        'symbol': signal_data['symbol'],
                        'direction': signal_data['direction'],
                        'entry_price': signal_data['entry_price'],
                        'order_id': signal_data.get('order_id', 'N/A')
                    })
            
            message_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**

üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {status.get('last_check', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {status.get('processed_signals', 0)}
üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {status.get('open_positions', 0)}
üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(active_orders)}

{'üî¥ **–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:**' if active_orders else '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç'}
"""
            
            if active_orders:
                for order in active_orders:
                    message_text += f"""
‚Ä¢ {order['symbol']} {order['direction']} @ {order['entry_price']}
  ID: {order['order_id']}
"""
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                update.callback_query.edit_message_text(
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                update.message.reply_text(
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
    
    def _show_orders_menu(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            active_orders = []
            for signal_id, signal_data in self.signal_processor.processed_signals.items():
                if signal_data.get('status') == OrderStatus.PLACED.value:
                    active_orders.append({
                        'id': signal_id,
                        'symbol': signal_data['symbol'],
                        'direction': signal_data['direction'],
                        'entry_price': signal_data['entry_price'],
                        'order_id': signal_data.get('order_id', 'N/A')
                    })
            
            if not active_orders:
                message_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç"
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            else:
                message_text = f"üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ ({len(active_orders)}):**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–¥–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
                keyboard = []
                
                for order in active_orders:
                    button_text = f"‚ùå {order['symbol']} {order['direction']} @ {order['entry_price']}"
                    keyboard.append([InlineKeyboardButton(button_text, callback_data=f"cancel_order:{order['id']}")])
                
                keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ", callback_data="cancel_all_orders")])
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                update.callback_query.edit_message_text(
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                update.message.reply_text(
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤")
    
    def _button_callback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        query.answer()
        
        data = query.data
        
        try:
            if data == "start_bot":
                self._handle_start_bot(query)
            elif data == "stop_bot":
                self._handle_stop_bot(query)
            elif data == "stop_cancel_all":
                self._handle_stop_cancel_all(query)
            elif data == "show_status":
                self._show_status(update, context)
            elif data == "show_orders":
                self._show_orders_menu(update, context)
            elif data == "cancel_all_orders":
                self._handle_cancel_all_orders(query)
            elif data.startswith("cancel_order:"):
                order_id = data.split(":")[1]
                self._handle_cancel_single_order(query, order_id)
            elif data == "back_to_menu":
                self._show_main_menu(update, context)
            elif data == "refresh":
                self._show_main_menu(update, context)
            else:
                query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ {data}: {e}")
            self._send_error_message(update, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    def _handle_start_bot(self, query):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞"""
        try:
            query.edit_message_text(
                "üü¢ **–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω!**\n\n–ë–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã.",
                parse_mode='Markdown'
            )
            self.logger.info("üü¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ Telegram")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞: {e}")
            self._send_error_message(query, "–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞")
    
    def _handle_stop_bot(self, query):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞"""
        try:
            query.edit_message_text(
                "üî¥ **–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!**\n\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç.",
                parse_mode='Markdown'
            )
            self.logger.info("üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ Telegram")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞: {e}")
            self._send_error_message(query, "–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞")
    
    def _handle_stop_cancel_all(self, query):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ —Å –æ—Ç–º–µ–Ω–æ–π –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            cancelled_count = 0
            for signal_id, signal_data in self.signal_processor.processed_signals.items():
                if signal_data.get('status') == OrderStatus.PLACED.value:
                    if self.signal_processor.exchange.cancel_order(
                        signal_data['order_id'], 
                        signal_data['symbol']
                    ):
                        self.signal_processor.processed_signals[signal_id]['status'] = OrderStatus.CLOSED.value
                        cancelled_count += 1
            
            self.signal_processor._save_processed_signals()
            
            query.edit_message_text(
                f"üõë **–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –∏ –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã!**\n\n"
                f"–û—Ç–º–µ–Ω–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {cancelled_count}\n"
                f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                parse_mode='Markdown'
            )
            self.logger.info(f"üõë –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –∏ –æ—Ç–º–µ–Ω–µ–Ω–æ {cancelled_count} –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ Telegram")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ —Å –æ—Ç–º–µ–Ω–æ–π –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            self._send_error_message(query, "–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ —Å –æ—Ç–º–µ–Ω–æ–π –æ—Ä–¥–µ—Ä–æ–≤")
    
    def _handle_cancel_all_orders(self, query):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            cancelled_count = 0
            failed_count = 0
            
            for signal_id, signal_data in self.signal_processor.processed_signals.items():
                if signal_data.get('status') == OrderStatus.PLACED.value:
                    if self.signal_processor.exchange.cancel_order(
                        signal_data['order_id'], 
                        signal_data['symbol']
                    ):
                        self.signal_processor.processed_signals[signal_id]['status'] = OrderStatus.CLOSED.value
                        cancelled_count += 1
                    else:
                        failed_count += 1
            
            self.signal_processor._save_processed_signals()
            
            message_text = f"‚ùå **–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            message_text += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ: {cancelled_count}\n"
            if failed_count > 0:
                message_text += f"‚ùå –û—à–∏–±–æ–∫ –æ—Ç–º–µ–Ω—ã: {failed_count}\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            self.logger.info(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ {cancelled_count} –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ Telegram")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            self._send_error_message(query, "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤")
    
    def _handle_cancel_single_order(self, query, order_id):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            if order_id in self.signal_processor.processed_signals:
                signal_data = self.signal_processor.processed_signals[order_id]
                
                if signal_data.get('status') == OrderStatus.PLACED.value:
                    if self.signal_processor.exchange.cancel_order(
                        signal_data['order_id'], 
                        signal_data['symbol']
                    ):
                        self.signal_processor.processed_signals[order_id]['status'] = OrderStatus.CLOSED.value
                        self.signal_processor._save_processed_signals()
                        
                        query.edit_message_text(
                            f"‚úÖ **–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω!**\n\n"
                            f"–°–∏–º–≤–æ–ª: {signal_data['symbol']}\n"
                            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal_data['direction']}\n"
                            f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal_data['entry_price']}",
                            parse_mode='Markdown'
                        )
                        
                        self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {order_id} –æ—Ç–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ Telegram")
                    else:
                        query.edit_message_text(
                            f"‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞!**\n\n"
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä {order_id}.\n"
                            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤—Ä—É—á–Ω—É—é –Ω–∞ –±–∏—Ä–∂–µ.",
                            parse_mode='Markdown'
                        )
                else:
                    query.edit_message_text(
                        f"‚ö†Ô∏è **–û—Ä–¥–µ—Ä —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!**\n\n"
                        f"–°—Ç–∞—Ç—É—Å: {signal_data.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                        parse_mode='Markdown'
                    )
            else:
                query.edit_message_text(
                    "‚ùå **–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!**",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
            self._send_error_message(query, f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞: {e}")
    
    def _send_error_message(self, update, error_text: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update, 'edit_message_text'):
            update.edit_message_text(
                f"‚ùå **–û—à–∏–±–∫–∞!**\n\n{error_text}",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞!**\n\n{error_text}",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        self.updater.start_polling()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
        self.updater.stop() 