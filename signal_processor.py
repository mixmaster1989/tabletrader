#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
"""

import logging
import time
from typing import List, Dict, Optional
from datetime import datetime
from google_sheets_api import GoogleSheetsAPI
from bybit_api import BybitAPI
from telegram_bot import TelegramBot

class SignalProcessor:
    def __init__(self, config: Dict):
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.google_sheets = GoogleSheetsAPI(
            config['GOOGLE_CREDENTIALS_FILE'],
            config['GOOGLE_SHEETS_ID']
        )
        
        self.bybit = BybitAPI(
            config['BYBIT_API_KEY'],
            config['BYBIT_API_SECRET'],
            config['BYBIT_TESTNET']
        )
        
        self.telegram = TelegramBot(
            config['TELEGRAM_BOT_TOKEN'],
            config['TELEGRAM_CHAT_ID']
        )
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.processed_signals = set()
        self.last_check_time = None
        
        self.logger.info("‚úÖ SignalProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def process_signals(self) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –ß–∏—Ç–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
            signals = self.google_sheets.read_signals()
            
            if not signals:
                self.logger.info("üìä –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç")
                return {'processed': 0, 'errors': 0}
            
            processed_count = 0
            error_count = 0
            
            for signal in signals:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —Å–∏–≥–Ω–∞–ª
                    signal_id = f"{signal['symbol']}_{signal['row']}"
                    if signal_id in self.processed_signals:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
                    if self._can_enter_position(signal):
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é
                        result = self._execute_signal(signal)
                        
                        if result['success']:
                            self.processed_signals.add(signal_id)
                            processed_count += 1
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            self._send_notification(signal, result)
                            
                            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                            self.google_sheets.mark_signal_processed(signal['row'])
                        else:
                            error_count += 1
                            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {result['error']}")
                    else:
                        self.logger.info(f"‚è∏Ô∏è –°–∏–≥–Ω–∞–ª {signal['symbol']} –ø—Ä–æ–ø—É—â–µ–Ω - —É—Å–ª–æ–≤–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç")
                        
                except Exception as e:
                    error_count += 1
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {signal.get('symbol', 'Unknown')}: {e}")
            
            self.last_check_time = datetime.now()
            
            return {
                'processed': processed_count,
                'errors': error_count,
                'total_signals': len(signals)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return {'processed': 0, 'errors': 1}
    
    def _can_enter_position(self, signal: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            positions = self.bybit.get_positions()
            if len(positions) >= self.config['MAX_POSITIONS']:
                self.logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π ({self.config['MAX_POSITIONS']})")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —ç—Ç–æ–π –º–æ–Ω–µ—Ç–µ
            for pos in positions:
                if pos.get('symbol') == signal['symbol']:
                    self.logger.info(f"‚è∏Ô∏è –ü–æ–∑–∏—Ü–∏—è –ø–æ {signal['symbol']} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
            current_price = self.bybit.get_last_price(signal['symbol'])
            if not current_price:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {signal['symbol']}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç —Å–∏–≥–Ω–∞–ª–∞
            price_deviation = abs(current_price - signal['entry_price']) / signal['entry_price'] * 100
            if price_deviation > self.config['PRICE_DEVIATION']:
                self.logger.warning(f"‚ö†Ô∏è –¶–µ–Ω–∞ {signal['symbol']} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –Ω–∞ {price_deviation:.2f}%")
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞: {e}")
            return False
    
    def _execute_signal(self, signal: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            order_params = {
                'symbol': signal['symbol'],
                'side': signal['direction'],
                'size': self.config['DEFAULT_POSITION_SIZE'],
                'leverage': self.config['DEFAULT_LEVERAGE'],
                'take_profit': signal['take_profit'],
                'stop_loss': signal['stop_loss']
            }
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            result = self.bybit.open_order_with_tp_sl(order_params)
            
            if result.get('retCode') == 0:
                return {
                    'success': True,
                    'order_id': result.get('result', {}).get('orderId'),
                    'price': result.get('result', {}).get('avgPrice'),
                    'size': order_params['size']
                }
            else:
                return {
                    'success': False,
                    'error': result.get('retMsg', 'Unknown error')
                }
                
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
    
    def _send_notification(self, signal: Dict, result: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ"""
        try:
            message = f"""üöÄ –ù–û–í–ê–Ø –°–î–ï–õ–ö–ê –û–¢–ö–†–´–¢–ê

üìä –ú–æ–Ω–µ—Ç–∞: {signal['symbol']}
üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal['direction']}
üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal['entry_price']}
üìè –†–∞–∑–º–µ—Ä: {result['size']}
üéØ Take Profit: {signal['take_profit']}
üõë Stop Loss: {signal['stop_loss']}

‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ
üÜî Order ID: {result.get('order_id', 'N/A')}

‚è∞ {datetime.now().strftime('%H:%M:%S UTC')}"""
            
            self.telegram.send_message(message)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        return {
            'last_check': self.last_check_time.isoformat() if self.last_check_time else None,
            'processed_signals': len(self.processed_signals),
            'open_positions': len(self.bybit.get_positions()),
            'max_positions': self.config['MAX_POSITIONS']
        } 