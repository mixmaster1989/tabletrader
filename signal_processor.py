#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
"""

import logging
import time
from typing import List, Dict, Optional
from datetime import datetime
from binance_api import BinanceAPI
from google_sheets_api import GoogleSheetsAPI
from telegram_bot import TelegramBot

class SignalProcessor:
    def __init__(self, config: Dict):
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.google_sheets = GoogleSheetsAPI(
            config['GOOGLE_CREDENTIALS_FILE'],
            config['GOOGLE_SHEETS_ID'],
            float(config["DEFAULT_POSITION_SIZE"]),
            int(config["DEFAULT_LEVERAGE"]),
        )
        
        self.exchange = BinanceAPI(
            config['BINANCE_API_KEY'],
            config['BINANCE_API_SECRET'],
            config['BINANCE_TESTNET']
        )
        
        self.telegram = TelegramBot(
            config['TELEGRAM_BOT_TOKEN'],
            config['TELEGRAM_CHAT_ID']
        )
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.processed_signals = dict()
        self.last_check_time = None
        
        self.logger.info("‚úÖ SignalProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def process_signals(self) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            positions = self.exchange.get_positions()
            if positions:
                self.logger.info(f"üìä –û—Ç–∫—Ä—ã—Ç–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π")

            for pos in positions:
                self.logger.info(f"üìä –ü–æ–∑–∏—Ü–∏—è: {pos['symbol']} {pos['side']} {pos['size']} USDT")

            # –ß–∏—Ç–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
            signals = self.google_sheets.read_signals()
            
            if not signals:
                self.logger.info("üìä –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç")
                return {'processed': 0, 'errors': 0}
            
            processed_count = 0
            error_count = 0

            for signal in signals:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —Å–∏–≥–Ω–∞–ª
                    signal_id = f"{signal['symbol']}_{signal['row']}"
                    if signal_id in self.processed_signals and self.processed_signals[signal_id]['processed']:
                        # processed_signal = self.processed_signals[signal_id]
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ TP –∏–ª–∏ SL
                        # if signal['take_profit'] != processed_signal['take_profit'] or \
                        #    signal['stop_loss'] != processed_signal['stop_loss']:
                        #     try:
                        #         self.logger.info(f"üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ TP/SL –¥–ª—è {signal['symbol']}. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞...")
                        #         update_params = {
                        #             'symbol': signal['symbol'],
                        #             'take_profit': signal['take_profit'],
                        #             'stop_loss': signal['stop_loss']
                        #         }
                        #         update_result = self.exchange.modify_trading_stop(update_params)
                        #         if update_result['success']:
                        #             # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        #             self.processed_signals[signal_id]['take_profit'] = signal['take_profit']
                        #             self.processed_signals[signal_id]['stop_loss'] = signal['stop_loss']
                        #             self.logger.info(f"‚úÖ TP/SL –¥–ª—è {signal['symbol']} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
                        #         else:
                        #             self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TP/SL –¥–ª—è {signal['symbol']}: {update_result['error']}")
                        #     except Exception as e:
                        #         self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TP/SL –¥–ª—è {signal['symbol']}: {e}")
                        continue

                    usdtSize = signal['size']

                    current_price = self.exchange.get_last_price(signal['symbol'])

                    posSize = self.exchange.calculate_position_size(signal['symbol'], usdtSize,current_price)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
                    if self._can_enter_position(signal):
                        print(signal)
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é
                        result = self._execute_signal(signal, posSize)
                        
                        if result['success']:
                            self.processed_signals[signal_id] = {
                                "processed": True,
                                "order_id": result.get('order_id'),
                                "tp_order_id": result.get('tp_order_id'),
                                "sl_order_id": result.get('sl_order_id'),
                                "take_profit": signal['take_profit'],
                                "stop_loss": signal['stop_loss'],
                            }
                            processed_count += 1
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            self._send_notification(signal, {**result, 'usdt': usdtSize})
                            
                            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                            # self.google_sheets.mark_signal_processed(signal['row'])
                        else:
                            error_count += 1
                            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {result['error']}")
                    else:
                        self.logger.info(f"‚è∏Ô∏è –°–∏–≥–Ω–∞–ª {signal['symbol']} –ø—Ä–æ–ø—É—â–µ–Ω - —É—Å–ª–æ–≤–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç")
                        
                except Exception as e:
                    error_count += 1
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {signal.get('symbol', 'Unknown')}: {e}")
            
            self.last_check_time = datetime.now()
            
            return {
                'processed': processed_count,
                'errors': error_count,
                'total_signals': len(signals)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return {'processed': 0, 'errors': 1}
    
    def _can_enter_position(self, signal: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é"""
        try:
            positions = self.exchange.get_positions()
            print(positions)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —ç—Ç–æ–π –º–æ–Ω–µ—Ç–µ
            for pos in positions:
                if pos.get('symbol') == signal['symbol'] + 'USDT':
                    self.logger.info(f"‚è∏Ô∏è –ü–æ–∑–∏—Ü–∏—è –ø–æ {signal['symbol']} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
            current_price = self.exchange.get_last_price(signal['symbol'])
            if not current_price:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {signal['symbol']}")
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞: {e}")
            return False
    
    def _execute_signal(self, signal: Dict, posSize: float) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            order_params = {
                'symbol': signal['symbol'],
                'side': signal['direction'],
                'size': posSize,
                'leverage': signal['leverage'],
                'take_profit': signal['take_profit'],
                'stop_loss': signal['stop_loss']
            }
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            result = self.exchange.open_order_with_tp_sl(order_params)
            
            if result.get('success'):
                return {
                    'success': True,
                    'order_id': result.get('orderId'),
                    'tp_order_id': result.get('tpOrderId'),
                    'sl_order_id': result.get('slOrderId'),
                    'price': result.get('avgPrice'),
                    'size': order_params['size']
                }
            else:
                return {
                    'success': False,
                    'error': result.get('error', 'Unknown error')
                }
                
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
    
    def _send_notification(self, signal: Dict, result: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ"""
        try:
            message = f"""üöÄ –ù–û–í–ê–Ø –°–î–ï–õ–ö–ê –û–¢–ö–†–´–¢–ê

üìä –ú–æ–Ω–µ—Ç–∞: {signal['symbol']}
üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal['direction']}
üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal['entry_price']}$
üìè –†–∞–∑–º–µ—Ä: {result['size']}
üìè –†–∞–∑–º–µ—Ä (USDT): {result['usdt']}$
üéØ Take Profit: {signal['take_profit']}$
üõë Stop Loss: {signal['stop_loss']}$

‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ
üÜî Order ID: {result.get('order_id', 'N/A')}

‚è∞ {datetime.now().strftime('%H:%M:%S UTC')}"""
            
            self.telegram.send_message(message)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        return {
            'last_check': self.last_check_time.isoformat() if self.last_check_time else None,
            'processed_signals': len(self.processed_signals),
            'open_positions': len(self.exchange.get_positions()),
            'max_positions': self.config['MAX_POSITIONS']
        } 