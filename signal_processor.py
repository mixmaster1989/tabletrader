#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
"""

import logging
import time
from typing import List, Dict, Optional
from datetime import datetime, timedelta
from google_sheets_api import GoogleSheetsAPI
from bybit_api import BybitAPI
from telegram_bot import TelegramBot
from utils import get_bybit_symbol
from trading_analyzer import TradingPatternAnalyzer

class SignalProcessor:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    """
    
    def __init__(self, bybit_api, google_sheets_api, telegram_bot, logger=None):
        self.bybit = bybit_api
        self.google_sheets = google_sheets_api
        self.telegram = telegram_bot
        self.logger = logger
        self.cycle_count = 0
        self.last_report_time = None
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ bybit_api
        self.config = bybit_api.config if hasattr(bybit_api, 'config') else {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.processed_signals = set()
        self.last_check_time = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        self.pattern_analyzer = TradingPatternAnalyzer(logger)
        self.pattern_analysis_done = False
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–Ω–µ—à–Ω–µ–≥–æ –ª–æ–≥–≥–µ—Ä–∞"""
        if self.logger:
            if level == "INFO":
                self.logger.info(message)
            elif level == "WARNING":
                self.logger.warning(message)
            elif level == "ERROR":
                self.logger.error(message)
        else:
            print(f"[{level}] {message}")
    
    def process_signals(self) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –ß–∏—Ç–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
            signals = self.google_sheets.read_signals()
            
            if not signals:
                self.logger.info("üìä –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç")
                return {'processed': 0, 'errors': 0}
            
            processed_count = 0
            error_count = 0
            
            for signal in signals:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —Å–∏–≥–Ω–∞–ª
                    signal_id = f"{signal['symbol']}_{signal['row']}"
                    if signal_id in self.processed_signals:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
                    if self._can_enter_position(signal):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
                        trade_mode = self.config.get('TRADE_MODE', 'trade')
                        
                        if trade_mode == 'monitor':
                            # –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
                            self.logger.info(f"üìä –†–ï–ñ–ò–ú –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê: –ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª {signal['symbol']} {signal['direction']} –ø–æ —Ü–µ–Ω–µ {signal['entry_price']}")
                            self.processed_signals.add(signal_id)
                            processed_count += 1
                        else:
                            # –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏
                            self.logger.info(f"üéØ –†–ï–ñ–ò–ú –¢–û–†–ì–û–í–õ–ò: –í—ã–ø–æ–ª–Ω—è—é —Å–∏–≥–Ω–∞–ª {signal['symbol']} {signal['direction']}")
                            result = self._execute_signal(signal)
                            
                            if result['success']:
                                self.processed_signals.add(signal_id)
                                processed_count += 1
                                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≤ Google Sheets
                                try:
                                    self.google_sheets.mark_signal_processed(signal['row'])
                                except Exception as e:
                                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Å–∏–≥–Ω–∞–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π: {e}")
                            else:
                                error_count += 1
                                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {result['error']}")
                    else:
                        self.logger.info(f"‚è∏Ô∏è –°–∏–≥–Ω–∞–ª {signal['symbol']} –ø—Ä–æ–ø—É—â–µ–Ω - —É—Å–ª–æ–≤–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç")
                        
                except Exception as e:
                    error_count += 1
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {signal.get('symbol', 'Unknown')}: {e}")
            
            self.last_check_time = datetime.now()
            
            return {
                'processed': processed_count,
                'errors': error_count,
                'total_signals': len(signals)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return {'processed': 0, 'errors': 1}
    
    def _can_enter_position(self, signal: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            positions = self.bybit.get_positions()
            max_positions = self.config.get('MAX_POSITIONS', 3)
            
            if len(positions) >= max_positions:
                self.logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π ({max_positions})")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —ç—Ç–æ–π –º–æ–Ω–µ—Ç–µ
            bybit_symbol = signal.get('bybit_symbol')
            if bybit_symbol:
                for pos in positions:
                    if pos.get('symbol') == bybit_symbol:
                        self.logger.info(f"‚è∏Ô∏è –ü–æ–∑–∏—Ü–∏—è –ø–æ {signal['symbol']} ({bybit_symbol}) —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞")
                        return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
            if not bybit_symbol:
                self.logger.error(f"‚ùå –ù–µ—Ç bybit_symbol –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ {signal['symbol']} ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                return False
                
            self.logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∫ Bybit: bybit_symbol={bybit_symbol} (–∏—Å—Ö–æ–¥–Ω—ã–π: {signal['symbol']})")
            current_price = self.bybit.get_last_price(bybit_symbol)
            if not current_price:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {signal['symbol']}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (–≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è)
            price_deviation = abs(current_price - signal['entry_price']) / signal['entry_price'] * 100
            max_deviation = self.config.get('PRICE_DEVIATION', 1.0)  # 1% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            self.logger.info(f"üìä {signal['symbol']}: —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ {signal['entry_price']:.6f}, —Ç–µ–∫—É—â–∞—è {current_price:.6f}, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {price_deviation:.2f}%")
            
            if price_deviation > max_deviation:
                self.logger.warning(f"‚ö†Ô∏è –¶–µ–Ω–∞ {signal['symbol']} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –Ω–∞ {price_deviation:.2f}% (–º–∞–∫—Å–∏–º—É–º {max_deviation}%)")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            if self.bybit.testnet:
                balance = self.bybit.get_balance()
                if balance:
                    available_balance = float(balance.get('availableToWithdraw', 0))
                    required_margin = float(self.config.get('DEFAULT_POSITION_SIZE', 0.01)) * self.config.get('DEFAULT_LEVERAGE', 10) / 100
                    
                    if available_balance < required_margin:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è: {required_margin} USDT, –¥–æ—Å—Ç—É–ø–Ω–æ: {available_balance} USDT")
                        return False
                    
                    self.logger.info(f"üí∞ –¢–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {available_balance} USDT, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {required_margin} USDT")
            
            self.logger.info(f"‚úÖ –£—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é {signal['symbol']} –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞: {e}")
            return False
    
    def _execute_signal(self, signal: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º Bybit —Å–∏–º–≤–æ–ª
            bybit_symbol = signal.get('bybit_symbol')
            if not bybit_symbol:
                return {
                    'success': False,
                    'error': f"–ù–µ—Ç bybit_symbol –¥–ª—è {signal['symbol']}"
                }
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            order_params = {
                'symbol': bybit_symbol,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Bybit —Å–∏–º–≤–æ–ª
                'side': 'Buy' if signal['direction'] == 'LONG' else 'Sell',
                'size': self.config.get('DEFAULT_POSITION_SIZE', 0.01),
                'leverage': self.config.get('DEFAULT_LEVERAGE', 10),
                'take_profit': signal.get('take_profit', 0),
                'stop_loss': signal.get('stop_loss', 0)
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏
            self.logger.info(f"üéØ –í–´–ü–û–õ–ù–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–ê –í –¢–ï–°–¢–û–í–û–ô –°–ï–¢–ò:")
            self.logger.info(f"   –°–∏–º–≤–æ–ª: {signal['symbol']} -> {bybit_symbol}")
            self.logger.info(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal['direction']} -> {order_params['side']}")
            self.logger.info(f"   –†–∞–∑–º–µ—Ä: {order_params['size']}")
            self.logger.info(f"   –ü–ª–µ—á–æ: {order_params['leverage']}x")
            self.logger.info(f"   TP: {order_params['take_profit']}")
            self.logger.info(f"   SL: {order_params['stop_loss']}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            result = self.bybit.open_order_with_tp_sl(order_params)
            
            if result.get('retCode') == 0:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                message = f"üéØ –¢–ï–°–¢–û–í–ê–Ø –°–î–ï–õ–ö–ê –û–¢–ö–†–´–¢–ê!\n\n"
                message += f"üìä –°–∏–º–≤–æ–ª: {signal['symbol']}\n"
                message += f"üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal['direction']}\n"
                message += f"üí∞ –†–∞–∑–º–µ—Ä: {order_params['size']}\n"
                message += f"‚ö° –ü–ª–µ—á–æ: {order_params['leverage']}x\n"
                message += f"üìà Take Profit: {order_params['take_profit']}\n"
                message += f"üìâ Stop Loss: {order_params['stop_loss']}\n"
                message += f"üÜî Order ID: {result.get('result', {}).get('orderId', 'N/A')}"
                
                self.telegram.send_message(message)
                
                self.logger.info(f"‚úÖ –¢–ï–°–¢–û–í–ê–Ø –°–î–ï–õ–ö–ê –£–°–ü–ï–®–ù–û –û–¢–ö–†–´–¢–ê: {signal['symbol']}")
                
                return {
                    'success': True,
                    'order_id': result.get('result', {}).get('orderId'),
                    'price': result.get('result', {}).get('avgPrice'),
                    'size': order_params['size']
                }
            else:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–¥–µ–ª–∫–∏: {result.get('retMsg', 'Unknown error')}"
                self.logger.error(error_msg)
                self.telegram.send_error(error_msg)
                
                return {
                    'success': False,
                    'error': result.get('retMsg', 'Unknown error')
                }
                
        except Exception as e:
            error_msg = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–¥–µ–ª–∫–∏: {str(e)}"
            self.logger.error(error_msg)
            self.telegram.send_error(error_msg)
            
            return {
                'success': False,
                'error': str(e)
            }
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        return {
            'last_check': self.last_check_time.isoformat() if self.last_check_time else None,
            'processed_signals': len(self.processed_signals),
            'open_positions': len(self.bybit.get_positions()),
            'max_positions': self.config['MAX_POSITIONS']
        }
    
    def send_backtest_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –±—ç–∫—Ç–µ—Å—Ç–µ –≤ Telegram"""
        self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±—ç–∫—Ç–µ—Å—Ç-–æ—Ç—á–µ—Ç–∞...")
        try:
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            signals = self.google_sheets.read_signals()
            
            if not signals:
                self.telegram.send_message("üìä –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_signals = len(signals)
            closed_signals = [s for s in signals if s['status'] == 'closed']
            open_signals = [s for s in signals if s['status'] == 'open']
            
            # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª–∏
            total_pnl = sum([s.get('profit_loss', 0) for s in closed_signals])
            avg_pnl = total_pnl / len(closed_signals) if closed_signals else 0
            
            # –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
            current_pnl_open = 0
            open_details = []
            if open_signals:
                for signal in open_signals:
                    backtest_result = self.google_sheets.backtest_signal(signal)
                    if backtest_result['success']:
                        current_pnl = backtest_result['signal'].get('current_pnl', 0)
                        current_pnl_open += current_pnl
                        open_details.append(f"‚Ä¢ {signal['symbol']} {signal['direction']}: {current_pnl:.2f}%")
            
            message = f"""üìä –û–¢–ß–ï–¢ –û –ë–≠–ö–¢–ï–°–¢–ï –¢–ê–ë–õ–ò–¶–´

üéØ –Ø –≤–∏–∂—É –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é {total_signals} —Å–¥–µ–ª–æ–∫!

üìà –ó–ê–ö–†–´–¢–´–ï –°–î–ï–õ–ö–ò: {len(closed_signals)}
üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_pnl:.2f}%
üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_pnl:.2f}%

üîç –û–¢–ö–†–´–¢–´–ï –°–î–ï–õ–ö–ò: {len(open_signals)}
üíπ –¢–µ–∫—É—â–∏–π P&L: {current_pnl_open:.2f}%"""
            
            if open_details:
                message += "\n\nüì± –ê–ö–¢–ò–í–ù–´–ï –ü–û–ó–ò–¶–ò–ò:\n" + "\n".join(open_details)
            
            # –¢–æ–ø-3 –ª—É—á—à–∏–µ —Å–¥–µ–ª–∫–∏
            if closed_signals:
                message += "\n\nüèÜ –õ–£–ß–®–ò–ï –°–î–ï–õ–ö–ò:"
                best_trades = sorted(closed_signals, key=lambda x: x.get('profit_loss', 0), reverse=True)[:3]
                for i, trade in enumerate(best_trades, 1):
                    pnl = trade.get('profit_loss', 0)
                    emoji = "üöÄ" if pnl > 0 else "üìâ"
                    message += f"\n{i}. {emoji} {trade['symbol']} {trade['direction']}: {pnl:.2f}%"
            
            message += f"""

üí™ –í–∞—à–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!
üì± –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç {len(open_signals)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π

‚è∞ {datetime.now().strftime('%H:%M:%S UTC')}"""
            
            self.telegram.send_message(message)
            self.logger.info("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç-–æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            self.telegram.send_message(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def analyze_trading_patterns(self):
        """
        –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
        """
        try:
            self.log("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
            self.logger.info("üß† –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–ê–¢–¢–ï–†–ù–û–í: –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
            signals = self.google_sheets.read_signals()
            self.logger.info(f"üß† –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–ê–¢–¢–ï–†–ù–û–í: –ü–æ–ª—É—á–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            if not signals:
                self.log("‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
                self.logger.warning("üß† –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–ê–¢–¢–ï–†–ù–û–í: –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if len(signals) < 10:
                self.log(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ({len(signals)} —Å–¥–µ–ª–æ–∫, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10)")
                self.logger.warning(f"üß† –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–ê–¢–¢–ï–†–ù–û–í: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ({len(signals)} —Å–¥–µ–ª–æ–∫)")
                return
            
            self.logger.info("üß† –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–ê–¢–¢–ï–†–ù–û–í: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            report = self.pattern_analyzer.analyze_all(signals)
            self.logger.info("üß† –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–ê–¢–¢–ï–†–ù–û–í: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, —Ñ–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
            self.pattern_analyzer.print_report(report)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –¥–ª—è Telegram
            summary = report['summary']
            rules = report['rules']
            
            telegram_report = f"""
üß† **–ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–´–• –ü–ê–¢–¢–ï–†–ù–û–í**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {summary['total_trades']}
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {summary['win_rate']:.1%}
‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {summary['total_profit']:.2f}%

üìã **–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:**
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-5 –ø—Ä–∞–≤–∏–ª
            for i, rule in enumerate(rules[:5], 1):
                telegram_report += f"{i}. {rule}\n"
            
            if len(rules) > 5:
                telegram_report += f"... –∏ –µ—â–µ {len(rules) - 5} –ø—Ä–∞–≤–∏–ª\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—É—á—à–∏—Ö —Å–∏–º–≤–æ–ª–∞—Ö
            if 'symbols' in report['patterns']:
                symbol_stats = report['patterns']['symbols']['stats']
                top_symbols = symbol_stats[('profit_loss', 'mean')].nlargest(3)
                telegram_report += f"\nüíé **–¢–æ–ø-3 —Å–∏–º–≤–æ–ª–∞:**\n"
                for symbol, profit in top_symbols.items():
                    win_rate = symbol_stats.loc[symbol, ('is_profitable', 'mean')]
                    telegram_report += f"‚Ä¢ {symbol}: {profit:.2f}% (–≤–∏–Ω—Ä–µ–π—Ç: {win_rate:.1%})\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            self.telegram.send_message(telegram_report)
            self.log("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            self.logger.info("üß† –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–ê–¢–¢–ï–†–ù–û–í: –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
            
            # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω
            self.pattern_analysis_done = True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            self.logger.error(f"üß† –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–ê–¢–¢–ï–†–ù–û–í: –û—à–∏–±–∫–∞ - {e}")
            import traceback
            self.logger.error(f"üß† –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–ê–¢–¢–ï–†–ù–û–í: Traceback: {traceback.format_exc()}")
    
    def monitor_positions(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏"""
        try:
            positions = self.bybit.get_positions()
            
            if not positions:
                return
            
            self.logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(positions)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
            
            for pos in positions:
                symbol = pos.get('symbol', 'Unknown')
                side = pos.get('side', 'Unknown')
                size = pos.get('size', '0')
                unrealized_pnl = pos.get('unrealisedPnl', '0')
                mark_price = pos.get('markPrice', '0')
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Telegram –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
                if self.cycle_count % 10 == 0:
                    message = f"üìä –ü–û–ó–ò–¶–ò–Ø: {symbol}\n"
                    message += f"üìà –°—Ç–æ—Ä–æ–Ω–∞: {side}\n"
                    message += f"üí∞ –†–∞–∑–º–µ—Ä: {size}\n"
                    message += f"üìä P&L: {unrealized_pnl}\n"
                    message += f"üíµ –¶–µ–Ω–∞: {mark_price}"
                    
                    self.telegram.send_message(message)
                
                self.logger.info(f"   {symbol} {side}: —Ä–∞–∑–º–µ—Ä={size}, P&L={unrealized_pnl}, —Ü–µ–Ω–∞={mark_price}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    def send_testnet_status(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ –≤ Telegram"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance = self.bybit.get_balance()
            positions = self.bybit.get_positions()
            
            message = f"üéØ –°–¢–ê–¢–£–° –¢–ï–°–¢–û–í–û–ô –°–ï–¢–ò\n\n"
            
            if balance:
                total_balance = balance.get('totalWalletBalance', 'N/A')
                available_balance = balance.get('availableToWithdraw', 'N/A')
                message += f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance} USDT\n"
                message += f"üíµ –î–æ—Å—Ç—É–ø–Ω–æ: {available_balance} USDT\n"
            
            message += f"üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}\n"
            message += f"üîÑ –¶–∏–∫–ª: {self.cycle_count}\n"
            message += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            
            self.telegram.send_message(message)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}") 