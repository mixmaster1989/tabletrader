#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
"""

import logging
import time
import json
from typing import List, Dict, Optional
from datetime import datetime, date, timedelta
from enum import Enum
from binance_api import BinanceAPI
from google_sheets_api import GoogleSheetsAPI
from telegram_bot import TelegramBot

class OrderStatus(Enum):
    PLACED = "—Ä–∞–∑–º–µ—â–µ–Ω"
    FILLED = "–∏—Å–ø–æ–ª–Ω–µ–Ω"
    CLOSED = "–∑–∞–∫—Ä—ã—Ç"
    ERROR = "–æ—à–∏–±–∫–∞"

class SignalProcessor:
    def __init__(self, config: Dict):
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.google_sheets = GoogleSheetsAPI(
            config['GOOGLE_CREDENTIALS_FILE'],
            config['GOOGLE_SHEETS_ID'],
            float(config["DEFAULT_POSITION_SIZE"]),
            int(config["DEFAULT_LEVERAGE"]),
        )
        
        self.exchange = BinanceAPI(
            config['BINANCE_API_KEY'],
            config['BINANCE_API_SECRET'],
            config['BINANCE_TESTNET']
        )
        
        self.telegram = TelegramBot(
            config['TELEGRAM_BOT_TOKEN'],
            config['TELEGRAM_CHAT_ID']
        )
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.processed_signals_file = 'processed_signals.json'
        self.processed_signals = self._load_processed_signals()
        self.last_check_time = None
        
        self.logger.info("‚úÖ SignalProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _load_processed_signals(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            with open(self.processed_signals_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    def _save_processed_signals(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —Ñ–∞–π–ª."""
        try:
            with open(self.processed_signals_file, 'w', encoding='utf-8') as f:
                json.dump(self.processed_signals, f, ensure_ascii=False, indent=4)
            self.logger.info(f"üíæ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.processed_signals_file}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            positions = self.exchange.get_positions()
            open_positions = len([p for p in positions if float(p.get('positionAmt', 0)) != 0])
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            processed_signals = len(self.processed_signals)
            
            return {
                'last_check': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'processed_signals': processed_signals,
                'open_positions': open_positions
            }
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                'last_check': '–û—à–∏–±–∫–∞',
                'processed_signals': 0,
                'open_positions': 0
            }
    
    def process_signals(self) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ (PLACED)
            for signal_id, signal_data in list(self.processed_signals.items()):
                if signal_data.get('status') == OrderStatus.PLACED.value:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞
                    if self._check_order_cancellation_conditions(signal_id, signal_data):
                        # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
                        if self.exchange.cancel_order(signal_data['order_id'], signal_data['symbol']):
                            self.processed_signals[signal_id]['status'] = OrderStatus.CLOSED.value
                            self.telegram.send_message(f"‚ùå –û—Ä–¥–µ—Ä {signal_id} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —É—Å–ª–æ–≤–∏—è–º (—Ç–∞–π–º–∞—É—Ç –∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ TP)")
                            self._save_processed_signals()
                            continue
                        else:
                            # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            self.processed_signals[signal_id]['status'] = OrderStatus.ERROR.value
                            self.telegram.send_message(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä {signal_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n"
                                                      f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é –Ω–∞ –±–∏—Ä–∂–µ:\n"
                                                      f"‚Ä¢ –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω - –≤—Å–µ —Ö–æ—Ä–æ—à–æ\n"
                                                      f"‚Ä¢ –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω - –æ—Ç–º–µ–Ω–∏—Ç–µ –≤—Ä—É—á–Ω—É—é\n\n"
                                                      f"üìä –î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞:\n"
                                                      f"‚Ä¢ –°–∏–º–≤–æ–ª: {signal_data['symbol']}\n"
                                                      f"‚Ä¢ Order ID: {signal_data['order_id']}\n"
                                                      f"‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal_data['direction']}\n"
                                                      f"‚Ä¢ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal_data['entry_price']}")
                            self._save_processed_signals()
                            continue
                    
                    order_status = self.exchange.check_order_status(signal_data['order_id'], signal_data['symbol'])
                    if order_status == 'NOT_FOUND':
                        self.logger.info(f"‚ùå –û—Ä–¥–µ—Ä {signal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                        self.processed_signals[signal_id]['status'] = OrderStatus.ERROR.value
                        self.telegram.send_message(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä {signal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                        continue
                    if order_status == None:
                        self.logger.info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ {signal_id}!")
                        self.processed_signals[signal_id]['status'] = OrderStatus.ERROR.value
                        self.telegram.send_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ {signal_id}!")
                        continue
                    if order_status == 'FILLED':
                        self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {signal_id} –∏—Å–ø–æ–ª–Ω–µ–Ω!")
                        self.processed_signals[signal_id]['status'] = OrderStatus.FILLED.value
                        self._send_notification(self.processed_signals[signal_id], status=OrderStatus.FILLED)

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TP/SL –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                        tp_sl_params = {
                            'symbol': signal_data['symbol'],
                            'direction': signal_data['direction'],
                            'size': signal_data['size'],
                            'take_profit': signal_data['take_profit'],
                            'stop_loss': signal_data['stop_loss']
                        }
                        tp_sl_result = self.exchange.place_tp_sl_for_position(tp_sl_params)
                        if tp_sl_result.get('success'):
                            self.logger.info(f"‚úÖ TP/SL –¥–ª—è {signal_id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. TP: {signal_data['take_profit']}, SL: {signal_data['stop_loss']}")
                            self.processed_signals[signal_id].update(tp_sl_result.get('orders', {}))
                            self.telegram.send_message(f"‚úÖ TP/SL –¥–ª—è {signal_id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. TP: {signal_data['take_profit']}, SL: {signal_data['stop_loss']}")
                        else:
                            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TP/SL –¥–ª—è {signal_id}. –û—à–∏–±–∫–∞: {tp_sl_result.get('error')}")
                            
                            self.telegram.send_error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TP/SL –¥–ª—è {signal_id}, –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è")
                    elif order_status in ['CANCELED', 'EXPIRED']:
                        self.logger.warning(f"‚ùå –û—Ä–¥–µ—Ä {signal_id} –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫.")
                        self.processed_signals[signal_id]['status'] = OrderStatus.CLOSED.value
                        self.telegram.send_message(f"‚ùå –û—Ä–¥–µ—Ä {signal_id} –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫.")

            # 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π (FILLED -> CLOSED)
            positions = self.exchange.get_positions()
            open_position_symbols = {p['symbol'] for p in positions}
            for signal_id, signal_data in list(self.processed_signals.items()):
                if signal_data.get('status') == OrderStatus.FILLED.value:
                    position_symbol = signal_data['symbol'] + 'USDT'
                    if position_symbol not in open_position_symbols:
                        self.logger.info(f"üîÑ –ü–æ–∑–∏—Ü–∏—è –ø–æ —Å–∏–≥–Ω–∞–ª—É {signal_id} –∑–∞–∫—Ä—ã—Ç–∞ –Ω–∞ –±–∏—Ä–∂–µ.")
                        self.processed_signals[signal_id]['status'] = OrderStatus.CLOSED.value
                        self.telegram.send_message(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –ø–æ —Å–∏–≥–Ω–∞–ª—É {signal_id} –∑–∞–∫—Ä—ã—Ç–∞.")

            # –ß–∏—Ç–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
            signals = self.google_sheets.read_signals()
            
            if not signals:
                self.logger.info("üìä –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç")
                return {'processed': 0, 'errors': 0}
            
            processed_count = 0
            error_count = 0

            for signal in signals:
                try:
                    signal_id = f"{signal['symbol']}_{signal['id']}"
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ (–Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ ERROR)
                    if signal_id in self.processed_signals and \
                       self.processed_signals[signal_id].get('status') not in [OrderStatus.ERROR.value]:
                        # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è entry_price –¥–ª—è –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                        if self.processed_signals[signal_id].get('status') == OrderStatus.PLACED.value and \
                           (signal['entry_price'] != self.processed_signals[signal_id]['entry_price']):
                            self._set_new_entry_price(signal_id, signal)
                        # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TP/SL –¥–ª—è —É–∂–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                        if self.processed_signals[signal_id].get('status') == OrderStatus.FILLED.value and \
                           (signal['take_profit'] != self.processed_signals[signal_id]['take_profit'] or \
                            signal['stop_loss'] != self.processed_signals[signal_id]['stop_loss']):
                            self._update_tp_sl(signal, signal_id)
                        continue

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π —Å–∏–≥–Ω–∞–ª –ø–æ —ç—Ç–æ–π –∂–µ –º–æ–Ω–µ—Ç–µ —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ
                    
                    is_signal_in_work = False
                    
                    for processed_signal_id, processed_signal in self.processed_signals.items():
                        if processed_signal['symbol'] == signal['symbol'] and \
                           processed_signal.get('status') not in [OrderStatus.ERROR.value, OrderStatus.CLOSED.value]:
                            is_signal_in_work = True
                            break

                    if is_signal_in_work:
                        continue

                    signal_time = signal['date']
                    end_active = signal_time + timedelta(minutes=20)
                    now = datetime.now()

                    if now < signal_time:
                        self.logger.info(f"üïí –°–∏–≥–Ω–∞–ª –≤ —Å—Ç—Ä–æ–∫–µ {signal['id']} –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª (–¥–æ –≤—Ä–µ–º–µ–Ω–∏: {(signal_time - now).total_seconds() / 60:.1f} –º–∏–Ω)")
                        continue
                    elif now > end_active:
                        continue
                    
                    balance = self.exchange.get_balance() * 0.95 
                    if balance < signal['size']:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ {signal['symbol']} –≤ —Å—Ç—Ä–æ–∫–µ {signal['id']}")
                        signal['size'] = balance

                    posSize = self.exchange.calculate_position_size(signal['symbol'], signal['size'] * signal['leverage'],signal['entry_price'])
                    
                    # –í—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é (–≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞)
                    if self._can_enter_position(signal):
                        self.logger.info(f"üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ {signal_id}")
                        result = self._execute_signal(signal, posSize)
                        
                        if result['success']:
                            self.processed_signals[signal_id] = {
                                'status': OrderStatus.PLACED.value,
                                'id': signal['id'],
                                'order_id': result.get('order_id'),
                                'symbol': signal['symbol'],
                                'direction': signal['direction'],
                                'entry_price': signal['entry_price'],
                                'take_profit': signal['take_profit'],
                                'stop_loss': signal['stop_loss'],
                                'size': posSize,
                                'order_time': datetime.now().isoformat() # –í—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
                            }
                            processed_count += 1
                            self._send_notification(self.processed_signals[signal_id], status=OrderStatus.PLACED)
                            break # –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                        else:
                            error_count += 1
                            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ {signal.get('symbol', 'Unknown')} –≤ —Å—Ç—Ä–æ–∫–µ {signal['id']}: {result['error']}")
                    else:
                        self.logger.info(f"‚è∏Ô∏è –°–∏–≥–Ω–∞–ª {signal['symbol']} –ø—Ä–æ–ø—É—â–µ–Ω - —É—Å–ª–æ–≤–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç")
                        
                except Exception as e:
                    error_count += 1
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {signal.get('symbol', 'Unknown')} –≤ —Å—Ç—Ä–æ–∫–µ {signal['id']}: {e}")
            
            self._save_processed_signals() # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞
            self.last_check_time = datetime.now()
            
            return {
                'processed': processed_count,
                'errors': error_count,
                'total_signals': len(signals)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            self._save_processed_signals() # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
            return {'processed': 0, 'errors': 1}

    def _update_tp_sl(self, signal: Dict, signal_id: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç Take Profit –∏ Stop Loss –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏."""
        try:
            self.logger.info(f"üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ TP/SL –¥–ª—è {signal['symbol']}. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ TP/SL...")
            update_params = {
                'symbol': signal['symbol'],
                'take_profit': signal['take_profit'],
                'stop_loss': signal['stop_loss']
            }
            update_result = self.exchange.modify_trading_stop(update_params)
            if update_result['success']:
                self.processed_signals[signal_id]['take_profit'] = signal['take_profit']
                self.processed_signals[signal_id]['stop_loss'] = signal['stop_loss']
                self._save_processed_signals()
                self.logger.info(f"‚úÖ TP/SL –¥–ª—è {signal_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. TP: {signal['take_profit']}, SL: {signal['stop_loss']}")
                self.telegram.send_message(f"‚úÖ TP/SL –¥–ª—è {signal_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. TP: {signal['take_profit']}, SL: {signal['stop_loss']}")
            else:
                error_msg = update_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                self.processed_signals[signal_id]['status'] = OrderStatus.ERROR.value
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TP/SL –¥–ª—è {signal_id}: {error_msg}")
                self.telegram.send_error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TP/SL –¥–ª—è {signal_id}: {error_msg}")
        except Exception as e:
            self.processed_signals[signal_id]['status'] = OrderStatus.ERROR.value
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ TP/SL –¥–ª—è {signal_id}: {e}")
            self.telegram.send_error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ TP/SL –¥–ª—è {signal_id}")
    
    def _can_enter_position(self, signal: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é"""
        try:
            positions = self.exchange.get_positions()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —ç—Ç–æ–π –º–æ–Ω–µ—Ç–µ
            for pos in positions:
                if pos.get('symbol') == signal['symbol'] + 'USDT':
                    self.logger.info(f"‚è∏Ô∏è –ü–æ–∑–∏—Ü–∏—è –ø–æ {signal['symbol']} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞")
                    return False

            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞: {e}")
            return False

    def _set_new_entry_price(self, signal_id: str, signal: Dict):
        try:
            posSize = self.exchange.calculate_position_size(signal['symbol'], signal['size'] * signal['leverage'],signal['entry_price'])
            result = self._execute_signal(signal, posSize)
            if result['success']:
                self.logger.info(f"‚úÖ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –¥–ª—è {signal_id}")
                self.telegram.send_message(f"‚úÖ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –¥–ª—è {signal_id}")
                self.processed_signals[signal_id]['entry_price'] = signal['entry_price']
                self.processed_signals[signal_id]['order_id'] = result.get('order_id')
                self.processed_signals[signal_id]['order_time'] = datetime.now().isoformat()
                self._save_processed_signals()
            else:
                self.processed_signals[signal_id]['status'] = OrderStatus.ERROR.value
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ {signal_id}: {result['error']}")
                self.telegram.send_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ {signal_id}")

        except Exception as e:
            self.processed_signals[signal_id]['status'] = OrderStatus.ERROR.value
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ {signal_id}: {e}")
    
    def _execute_signal(self, signal: Dict, posSize: float) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            order_params = {
                'symbol': signal['symbol'],
                'side': signal['direction'],
                'size': posSize,
                'leverage': signal['leverage'],
                'price': signal['entry_price']
            }
            
            # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
            result = self.exchange.place_limit_order(order_params)

            if result.get('success'):
                return {
                    'success': True,
                    'order_id': result.get('orderId'),
                }
            else:
                return {
                    'success': False,
                    'error': result.get('error', 'Unknown error')
                }
                
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
    
    def _check_order_cancellation_conditions(self, signal_id: str, signal_data: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞:
        1. –ü—Ä–æ—à–ª–æ 20 –º–∏–Ω—É—Ç —Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        2. –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
            if 'order_time' not in signal_data:
                return False
            
            order_time = datetime.fromisoformat(signal_data['order_time'])
            current_time = datetime.now()
            
            # –ü—Ä–∞–≤–∏–ª–æ 1: –¢–∞–π–º–∞—É—Ç 20 –º–∏–Ω—É—Ç
            time_diff = current_time - order_time
            if time_diff.total_seconds() > 20 * 60:  # 20 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                self.logger.warning(f"‚è∞ –û—Ä–¥–µ—Ä {signal_id} –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç")
                return True
            
            # –ü—Ä–∞–≤–∏–ª–æ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            current_price = self.exchange.get_last_price(signal_data['symbol'])
            if current_price is None:
                return False
            
            take_profit = signal_data['take_profit']
            direction = signal_data['direction']
            
            # –î–ª—è LONG: –µ—Å–ª–∏ —Ü–µ–Ω–∞ >= TP, –Ω–æ –æ—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω
            if direction == 'LONG' and current_price >= take_profit:
                self.logger.warning(f"üéØ –û—Ä–¥–µ—Ä {signal_id}: —Ü–µ–Ω–∞ {current_price} –¥–æ—Å—Ç–∏–≥–ª–∞ TP {take_profit}")
                return True
            
            # –î–ª—è SHORT: –µ—Å–ª–∏ —Ü–µ–Ω–∞ <= TP, –Ω–æ –æ—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω
            if direction == 'SHORT' and current_price <= take_profit:
                self.logger.warning(f"üéØ –û—Ä–¥–µ—Ä {signal_id}: —Ü–µ–Ω–∞ {current_price} –¥–æ—Å—Ç–∏–≥–ª–∞ TP {take_profit}")
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {signal_id}: {e}")
            return False

    def _send_notification(self, signal_data: Dict, status: OrderStatus):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞."""
        try:
            if status == OrderStatus.PLACED:
                message = f"""üîµ –û–†–î–ï–† –†–ê–ó–ú–ï–©–ï–ù

üìä ID: {signal_data['symbol']}_{signal_data['id']}
üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal_data['direction']}
üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal_data['entry_price']}$
üéØ Take Profit: {signal_data['take_profit']}$
üõë Stop Loss: {signal_data['stop_loss']}$

üÜî Order ID: {signal_data.get('order_id', 'N/A')}
‚è∞ {datetime.now().strftime('%H:%M:%S UTC')}"""
            elif status == OrderStatus.FILLED:
                message = f"""‚úÖ –û–†–î–ï–† –ò–°–ü–û–õ–ù–ï–ù

üìä ID: {signal_data['symbol']}_{signal_data['id']}
üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal_data['direction']}
üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal_data['entry_price']}$

‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!
üÜî Order ID: {signal_data.get('order_id', 'N/A')}
‚è∞ {datetime.now().strftime('%H:%M:%S UTC')}"""
            else:
                return

            self.telegram.send_message(message)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        return {
            'last_check': self.last_check_time.isoformat() if self.last_check_time else None,
            'processed_signals': len(self.processed_signals),
            'open_positions': len(self.exchange.get_positions()),
        } 