#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ Bybit
"""

import os
import sys
from dotenv import load_dotenv
from bybit_api import BybitAPI

def test_testnet_connection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏"""
    print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ Bybit...")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    api_key = os.getenv('BYBIT_API_KEY')
    api_secret = os.getenv('BYBIT_API_SECRET')
    testnet = os.getenv('BYBIT_TESTNET', 'true').lower() == 'true'
    
    if not api_key or not api_secret:
        print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ BYBIT_API_KEY –∏ BYBIT_API_SECRET")
        return False
    
    if not testnet:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: BYBIT_TESTNET=false - –≤—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏!")
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").lower()
        if confirm != 'yes':
            return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API...")
        bybit_api = BybitAPI(api_key, api_secret, testnet=testnet)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        print("\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")
        balance = bybit_api.get_balance()
        if balance:
            print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {balance.get('totalWalletBalance', 'N/A')} USDT")
            print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {balance.get('availableToWithdraw', 'N/A')} USDT")
            print(f"   –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: {balance.get('totalPnl', 'N/A')} USDT")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        print("\nüè¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ...")
        account_info = bybit_api.get_account_info()
        if account_info:
            print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞!")
            print(f"   –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account_info.get('accountType', 'N/A')}")
            print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {account_info.get('riskLevel', 'N/A')}")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        test_symbol = "BTCUSDT"
        price = bybit_api.get_last_price(test_symbol)
        if price:
            print(f"‚úÖ –¶–µ–Ω–∞ {test_symbol}: {price}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {test_symbol}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        print("\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π...")
        positions = bybit_api.get_positions()
        if positions:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
            for pos in positions:
                symbol = pos.get('symbol', 'N/A')
                size = pos.get('size', '0')
                side = pos.get('side', 'N/A')
                print(f"   {symbol}: {side} {size}")
        else:
            print("‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç")
        
        print("\n" + "=" * 50)
        print("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üéØ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å Bybit —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        if testnet:
            print("üí∞ –í—ã –≥–æ—Ç–æ–≤—ã –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ")
        else:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏!")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è API –∫–ª—é—á–µ–π (Read, Trade)")
        print("4. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == '--help':
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_testnet.py")
        print("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ Bybit")
        return
    
    success = test_testnet_connection()
    
    if success:
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞: python main.py")
    else:
        print("\n‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞")
        sys.exit(1)

if __name__ == "__main__":
    main() 