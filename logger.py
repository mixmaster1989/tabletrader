#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Google Signals Bot
"""

import logging
import os
from datetime import datetime
from typing import Optional

class BotLogger:
    def __init__(self, name: str, log_file: str = "google_signals_bot.log", level: str = "INFO"):
        self.name = name
        self.log_file = log_file
        self.level = level
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger(name)
        self.logger.setLevel(getattr(logging, level.upper()))
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.logger.handlers.clear()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setLevel(getattr(logging, level.upper()))
        file_handler.setFormatter(formatter)
        self.logger.addHandler(file_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        console_handler = logging.StreamHandler()
        console_handler.setLevel(getattr(logging, level.upper()))
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)
    
    def info(self, message: str):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.logger.info(message)
    
    def warning(self, message: str):
        """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        self.logger.warning(message)
    
    def error(self, message: str):
        """–û—à–∏–±–∫–∞"""
        self.logger.error(message)
    
    def debug(self, message: str):
        """–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.logger.debug(message)
    
    def critical(self, message: str):
        """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"""
        self.logger.critical(message)
    
    def log_signal(self, signal_data: dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞"""
        message = f"üìä –°–∏–≥–Ω–∞–ª: {signal_data.get('symbol', 'N/A')} {signal_data.get('direction', 'N/A')} @ {signal_data.get('entry_price', 'N/A')}"
        self.info(message)
    
    def log_trade(self, trade_data: dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        message = f"üí∞ –°–¥–µ–ª–∫–∞: {trade_data.get('symbol', 'N/A')} {trade_data.get('side', 'N/A')} {trade_data.get('size', 'N/A')} @ {trade_data.get('price', 'N/A')}"
        self.info(message)
    
    def log_error(self, error: Exception, context: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        message = f"‚ùå –û—à–∏–±–∫–∞ –≤ {context}: {str(error)}"
        self.error(message)
    
    def log_status(self, status_data: dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        message = f"üìà –°—Ç–∞—Ç—É—Å: {status_data.get('processed_signals', 0)} —Å–∏–≥–Ω–∞–ª–æ–≤, {status_data.get('open_positions', 0)} –ø–æ–∑–∏—Ü–∏–π"
        self.info(message)

def setup_logging(log_file: str = "google_signals_bot.log", level: str = "INFO"):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    log_dir = os.path.dirname(log_file)
    if log_dir and not os.path.exists(log_dir):
        os.makedirs(log_dir)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    logging.basicConfig(
        level=getattr(logging, level.upper()),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –æ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('requests').setLevel(logging.WARNING)
    logging.getLogger('google').setLevel(logging.WARNING) 