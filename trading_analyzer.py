import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import warnings
warnings.filterwarnings('ignore')

class TradingPatternAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Ç—Ä–µ–π–¥–µ—Ä–∞
    """
    
    def __init__(self, logger=None):
        self.logger = logger
        self.patterns = {}
        self.features = []
        self.model = None
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–Ω–µ—à–Ω–µ–≥–æ –ª–æ–≥–≥–µ—Ä–∞"""
        if self.logger:
            if level == "INFO":
                self.logger.info(message)
            elif level == "WARNING":
                self.logger.warning(message)
            elif level == "ERROR":
                self.logger.error(message)
        else:
            print(f"[{level}] {message}")
    
    def prepare_data(self, signals):
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        self.log("üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
        df = pd.DataFrame(signals)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        df['entry_date'] = pd.to_datetime(df['entry_date'], format='%d.%m.%Y %H:%M')
        
        # –î–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º entry_date –∫–∞–∫ exit_date (—Ç–∞–∫ –∫–∞–∫ exit_date –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö)
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–∏–µ, –Ω–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        df['exit_date'] = df['entry_date']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        df['hour'] = df['entry_date'].dt.hour
        df['day_of_week'] = df['entry_date'].dt.dayofweek
        df['month'] = df['entry_date'].dt.month
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        df['price_range'] = abs(df['entry_price'] - df['exit_price'])
        df['price_range_pct'] = (df['price_range'] / df['entry_price']) * 100
        df['stop_loss_distance'] = abs(df['entry_price'] - df['stop_loss'])
        df['stop_loss_distance_pct'] = (df['stop_loss_distance'] / df['entry_price']) * 100
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        df['risk_reward_ratio'] = df['price_range_pct'] / df['stop_loss_distance_pct']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∫ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        df['direction_numeric'] = df['direction'].map({'LONG': 1, 'SHORT': -1})
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏
        df['is_profitable'] = (df['profit_loss'] > 0).astype(int)
        
        self.log(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(df)} —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return df
    
    def analyze_time_patterns(self, df):
        """
        –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        """
        self.log("‚è∞ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
        
        patterns = {}
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º
        hourly_stats = df.groupby('hour').agg({
            'is_profitable': ['count', 'mean'],
            'profit_loss': ['mean', 'std'],
            'direction_numeric': 'mean'
        }).round(3)
        
        patterns['hourly'] = {
            'most_profitable_hours': hourly_stats[hourly_stats[('is_profitable', 'mean')] > 0.6].index.tolist(),
            'least_profitable_hours': hourly_stats[hourly_stats[('is_profitable', 'mean')] < 0.4].index.tolist(),
            'stats': hourly_stats
        }
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        daily_stats = df.groupby('day_of_week').agg({
            'is_profitable': ['count', 'mean'],
            'profit_loss': ['mean', 'std']
        }).round(3)
        
        patterns['daily'] = {
            'best_days': daily_stats[daily_stats[('is_profitable', 'mean')] > 0.6].index.tolist(),
            'worst_days': daily_stats[daily_stats[('is_profitable', 'mean')] < 0.4].index.tolist(),
            'stats': daily_stats
        }
        
        self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(patterns['hourly']['most_profitable_hours'])} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤")
        return patterns
    
    def analyze_price_patterns(self, df):
        """
        –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        """
        self.log("üí∞ –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
        
        patterns = {}
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞–∑–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏
        df['position_size_category'] = pd.cut(df['price_range_pct'], 
                                            bins=[0, 1, 2, 5, 10, 100], 
                                            labels=['–û—á–µ–Ω—å –º–∞–ª–∞—è', '–ú–∞–ª–∞—è', '–°—Ä–µ–¥–Ω—è—è', '–ë–æ–ª—å—à–∞—è', '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è'])
        
        size_stats = df.groupby('position_size_category').agg({
            'is_profitable': ['count', 'mean'],
            'profit_loss': ['mean', 'std']
        }).round(3)
        
        patterns['position_size'] = {
            'best_sizes': size_stats[size_stats[('is_profitable', 'mean')] > 0.6].index.tolist(),
            'stats': size_stats
        }
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        risk_stats = df.groupby(pd.cut(df['risk_reward_ratio'], bins=5)).agg({
            'is_profitable': ['count', 'mean'],
            'profit_loss': ['mean', 'std']
        }).round(3)
        
        patterns['risk_reward'] = {
            'optimal_ratios': risk_stats[risk_stats[('is_profitable', 'mean')] > 0.6].index.tolist(),
            'stats': risk_stats
        }
        
        self.log(f"‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É")
        return patterns
    
    def analyze_symbol_patterns(self, df):
        """
        –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        """
        self.log("üìä –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª–∞–º...")
        
        patterns = {}
        
        symbol_stats = df.groupby('symbol').agg({
            'is_profitable': ['count', 'mean'],
            'profit_loss': ['mean', 'std'],
            'direction_numeric': 'mean',
            'price_range_pct': 'mean'
        }).round(3)
        
        patterns['symbols'] = {
            'most_profitable': symbol_stats[symbol_stats[('is_profitable', 'mean')] > 0.7].index.tolist(),
            'least_profitable': symbol_stats[symbol_stats[('is_profitable', 'mean')] < 0.3].index.tolist(),
            'long_bias': symbol_stats[symbol_stats[('direction_numeric', 'mean')] > 0.3].index.tolist(),
            'short_bias': symbol_stats[symbol_stats[('direction_numeric', 'mean')] < -0.3].index.tolist(),
            'stats': symbol_stats
        }
        
        self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(patterns['symbols']['most_profitable'])} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        return patterns
    
    def cluster_analysis(self, df):
        """
        –ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –ø–æ—Ö–æ–∂–∏—Ö —Å–¥–µ–ª–æ–∫
        """
        self.log("üéØ –ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        features = ['hour', 'day_of_week', 'price_range_pct', 'stop_loss_distance_pct', 
                   'risk_reward_ratio', 'direction_numeric']
        
        X = df[features].fillna(0)
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        inertias = []
        K_range = range(2, min(10, len(df) // 5))
        
        for k in K_range:
            kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
            kmeans.fit(X_scaled)
            inertias.append(kmeans.inertia_)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
        optimal_k = 3 if len(K_range) >= 3 else 2
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
        kmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10)
        df['cluster'] = kmeans.fit_predict(X_scaled)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã
        cluster_stats = df.groupby('cluster').agg({
            'is_profitable': ['count', 'mean'],
            'profit_loss': ['mean', 'std'],
            'symbol': 'nunique',
            'direction_numeric': 'mean',
            'hour': 'mean'
        }).round(3)
        
        patterns = {
            'clusters': {
                'optimal_k': optimal_k,
                'cluster_stats': cluster_stats,
                'cluster_centers': kmeans.cluster_centers_,
                'feature_names': features
            }
        }
        
        self.log(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {optimal_k} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —Å–¥–µ–ª–æ–∫")
        return patterns
    
    def build_prediction_model(self, df):
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–æ–∫
        """
        self.log("ü§ñ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        features = ['hour', 'day_of_week', 'month', 'price_range_pct', 
                   'stop_loss_distance_pct', 'risk_reward_ratio', 'direction_numeric']
        
        X = df[features].fillna(0)
        y = df['is_profitable']
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        model = RandomForestClassifier(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
        train_score = model.score(X_train, y_train)
        test_score = model.score(X_test, y_test)
        
        # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_importance = pd.DataFrame({
            'feature': features,
            'importance': model.feature_importances_
        }).sort_values('importance', ascending=False)
        
        patterns = {
            'prediction_model': {
                'model': model,
                'train_score': train_score,
                'test_score': test_score,
                'feature_importance': feature_importance,
                'features': features
            }
        }
        
        self.log(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ (—Ç–æ—á–Ω–æ—Å—Ç—å: {test_score:.3f})")
        return patterns
    
    def generate_trading_rules(self, patterns):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        """
        self.log("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª...")
        
        rules = []
        
        # –ü—Ä–∞–≤–∏–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if 'hourly' in patterns:
            profitable_hours = patterns['hourly']['most_profitable_hours']
            if profitable_hours:
                rules.append(f"üïê –¢–æ—Ä–≥–æ–≤–∞—Ç—å –≤ —á–∞—Å—ã: {profitable_hours}")
            
            unprofitable_hours = patterns['hourly']['least_profitable_hours']
            if unprofitable_hours:
                rules.append(f"‚è∏Ô∏è –ò–∑–±–µ–≥–∞—Ç—å —á–∞—Å–æ–≤: {unprofitable_hours}")
        
        if 'daily' in patterns:
            best_days = patterns['daily']['best_days']
            if best_days:
                day_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
                best_day_names = [day_names[day] for day in best_days]
                rules.append(f"üìÖ –õ—É—á—à–∏–µ –¥–Ω–∏: {best_day_names}")
        
        # –ü—Ä–∞–≤–∏–ª–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        if 'symbols' in patterns:
            profitable_symbols = patterns['symbols']['most_profitable']
            if profitable_symbols:
                rules.append(f"üíé –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {profitable_symbols}")
            
            long_bias = patterns['symbols']['long_bias']
            if long_bias:
                rules.append(f"üìà –°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ LONG: {long_bias}")
            
            short_bias = patterns['symbols']['short_bias']
            if short_bias:
                rules.append(f"üìâ –°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ SHORT: {short_bias}")
        
        # –ü—Ä–∞–≤–∏–ª–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏
        if 'position_size' in patterns:
            best_sizes = patterns['position_size']['best_sizes']
            if best_sizes:
                rules.append(f"üìè –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {best_sizes}")
        
        # –ü—Ä–∞–≤–∏–ª–∞ –ø–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É
        if 'risk_reward' in patterns:
            optimal_ratios = patterns['risk_reward']['optimal_ratios']
            if optimal_ratios:
                rules.append(f"‚öñÔ∏è –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ R/R: {optimal_ratios}")
        
        return rules
    
    def create_visualizations(self, df, patterns, save_path=None):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        self.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
        
        fig, axes = plt.subplots(2, 3, figsize=(18, 12))
        fig.suptitle('–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤', fontsize=16)
        
        # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏
        axes[0, 0].hist(df['profit_loss'], bins=20, alpha=0.7, color='skyblue')
        axes[0, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞')
        axes[0, 0].set_xlabel('P&L (%)')
        axes[0, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
        
        # 2. –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
        if 'hourly' in patterns:
            hourly_data = patterns['hourly']['stats']
            axes[0, 1].bar(hourly_data.index, hourly_data[('is_profitable', 'mean')])
            axes[0, 1].set_title('–ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º')
            axes[0, 1].set_xlabel('–ß–∞—Å')
            axes[0, 1].set_ylabel('–î–æ–ª—è –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫')
        
        # 3. –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        if 'symbols' in patterns:
            symbol_data = patterns['symbols']['stats']
            top_symbols = symbol_data[('is_profitable', 'mean')].nlargest(10)
            axes[0, 2].barh(range(len(top_symbols)), top_symbols.values)
            axes[0, 2].set_yticks(range(len(top_symbols)))
            axes[0, 2].set_yticklabels(top_symbols.index)
            axes[0, 2].set_title('–¢–æ–ø-10 –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤')
            axes[0, 2].set_xlabel('–î–æ–ª—è –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫')
        
        # 4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        direction_counts = df['direction'].value_counts()
        axes[1, 0].pie(direction_counts.values, labels=direction_counts.index, autopct='%1.1f%%')
        axes[1, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º')
        
        # 5. –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –ø–æ–∑–∏—Ü–∏–∏
        if 'position_size' in patterns:
            size_data = patterns['position_size']['stats']
            axes[1, 1].bar(range(len(size_data)), size_data[('is_profitable', 'mean')])
            axes[1, 1].set_title('–ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–∑–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏')
            axes[1, 1].set_xlabel('–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏')
            axes[1, 1].set_ylabel('–î–æ–ª—è –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫')
            axes[1, 1].set_xticks(range(len(size_data)))
            axes[1, 1].set_xticklabels(size_data.index, rotation=45)
        
        # 6. –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if 'prediction_model' in patterns:
            importance_data = patterns['prediction_model']['feature_importance']
            axes[1, 2].barh(range(len(importance_data)), importance_data['importance'])
            axes[1, 2].set_yticks(range(len(importance_data)))
            axes[1, 2].set_yticklabels(importance_data['feature'])
            axes[1, 2].set_title('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')
            axes[1, 2].set_xlabel('–í–∞–∂–Ω–æ—Å—Ç—å')
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            self.log(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {save_path}")
        
        plt.show()
    
    def analyze_all(self, signals):
        """
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        """
        self.log("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = self.prepare_data(signals)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –≤–∏–¥—ã –∞–Ω–∞–ª–∏–∑–∞
        all_patterns = {}
        
        all_patterns.update(self.analyze_time_patterns(df))
        all_patterns.update(self.analyze_price_patterns(df))
        all_patterns.update(self.analyze_symbol_patterns(df))
        all_patterns.update(self.cluster_analysis(df))
        all_patterns.update(self.build_prediction_model(df))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–∞
        rules = self.generate_trading_rules(all_patterns)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = {
            'summary': {
                'total_trades': len(df),
                'profitable_trades': df['is_profitable'].sum(),
                'win_rate': df['is_profitable'].mean(),
                'avg_profit': df['profit_loss'].mean(),
                'total_profit': df['profit_loss'].sum()
            },
            'patterns': all_patterns,
            'rules': rules,
            'data': df
        }
        
        self.log("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return report
    
    def print_report(self, report):
        """
        –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        """
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê –¢–û–†–ì–û–í–´–• –ü–ê–¢–¢–ï–†–ù–û–í")
        print("="*60)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary = report['summary']
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {summary['total_trades']}")
        print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {summary['profitable_trades']}")
        print(f"   –í–∏–Ω—Ä–µ–π—Ç: {summary['win_rate']:.1%}")
        print(f"   –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {summary['avg_profit']:.2f}%")
        print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {summary['total_profit']:.2f}%")
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        print(f"\nüìã –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–ê–í–ò–õ–ê:")
        for i, rule in enumerate(report['rules'], 1):
            print(f"   {i}. {rule}")
        
        # –¢–æ–ø-5 –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if 'symbols' in report['patterns']:
            symbol_stats = report['patterns']['symbols']['stats']
            top_symbols = symbol_stats[('profit_loss', 'mean')].nlargest(5)
            print(f"\nüíé –¢–û–ü-5 –ü–†–ò–ë–´–õ–¨–ù–´–• –°–ò–ú–í–û–õ–û–í:")
            for symbol, profit in top_symbols.items():
                win_rate = symbol_stats.loc[symbol, ('is_profitable', 'mean')]
                print(f"   {symbol}: {profit:.2f}% (–≤–∏–Ω—Ä–µ–π—Ç: {win_rate:.1%})")
        
        # –õ—É—á—à–∏–µ —á–∞—Å—ã
        if 'hourly' in report['patterns']:
            hourly_stats = report['patterns']['hourly']['stats']
            best_hours = hourly_stats[('is_profitable', 'mean')].nlargest(3)
            print(f"\nüïê –õ–£–ß–®–ò–ï –ß–ê–°–´ –î–õ–Ø –¢–û–†–ì–û–í–õ–ò:")
            for hour, win_rate in best_hours.items():
                print(f"   {hour}:00 - –≤–∏–Ω—Ä–µ–π—Ç: {win_rate:.1%}")
        
        print("\n" + "="*60) 