#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Google Signals Bot
"""

import asyncio
import logging
import signal
import sys
import time
from datetime import datetime
from config import load_config, validate_config
from signal_processor import SignalProcessor
from telegram_bot import TelegramBot
from bybit_api import BybitAPI
from google_sheets_api import GoogleSheetsAPI
# from telegram_webhook import create_webhook_server  # –£–¥–∞–ª–µ–Ω–æ
import threading

class GoogleSignalsBot:
    def __init__(self):
        self.config = None
        self.signal_processor = None
        self.telegram = None
        self.bybit_api = None
        self.google_sheets_api = None
        self.running = False
        self.logger = logging.getLogger(__name__)
        self.polling_thread = None
        
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.config:
            return
            
        log_level = getattr(logging, self.config.get('LOG_LEVEL', 'INFO'))
        log_file = self.config.get('LOG_FILE', './google_signals_bot.log')
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        import os
        log_dir = os.path.dirname(log_file)
        if log_dir and not os.path.exists(log_dir):
            os.makedirs(log_dir)
        
        logging.basicConfig(
            level=log_level,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file, encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )
    
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Signals Bot...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config = load_config()
            validate_config(self.config)
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            self._setup_logging()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.telegram = TelegramBot(
                self.config['TELEGRAM_BOT_TOKEN'],
                self.config['TELEGRAM_CHAT_ID'],
                google_sheets_api=self.google_sheets_api  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
            )
            
            self.bybit_api = BybitAPI(
                api_key=self.config['BYBIT_API_KEY'],
                api_secret=self.config['BYBIT_API_SECRET'],
                testnet=self.config.get('BYBIT_TESTNET', False)
            )
            
            self.google_sheets_api = GoogleSheetsAPI(
                credentials_file=self.config['GOOGLE_CREDENTIALS_FILE'],
                spreadsheet_id=self.config['GOOGLE_SPREADSHEET_ID'],
                bybit_api=self.bybit_api
            )
            
            self.signal_processor = SignalProcessor(
                bybit_api=self.bybit_api,
                google_sheets_api=self.google_sheets_api,
                telegram_bot=self.telegram,
                logger=self.logger
            )
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ signal_processor
            self.signal_processor.config = self.config
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–±-—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä –¥–ª—è Telegram
            # self.webhook_server = create_webhook_server(self.telegram, port=5000) # –£–¥–∞–ª–µ–Ω–æ
            
            # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –ø–æ –±—ç–∫—Ç–µ—Å—Ç—É
            self.signal_processor.send_backtest_report()

            # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            self.signal_processor.analyze_trading_patterns()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self._test_connections()
            
            self.logger.info("‚úÖ Google Signals Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            if self.telegram:
                self.telegram.send_error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def _test_connections(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        
        # –¢–µ—Å—Ç Telegram
        if not self.telegram.test_connection():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
        
        # –¢–µ—Å—Ç Bybit
        try:
            balance = self.bybit_api.get_balance()
            if balance:
                self.logger.info("‚úÖ Bybit API –ø–æ–¥–∫–ª—é—á–µ–Ω")
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å Bybit")
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit: {e}")
        
        # –¢–µ—Å—Ç Google Sheets
        try:
            signals = self.google_sheets_api.read_signals()
            self.logger.info(f"‚úÖ Google Sheets API –ø–æ–¥–∫–ª—é—á–µ–Ω (–Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)})")
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Google Signals Bot...")
            self.telegram.send_message("üöÄ Google Signals Bot –∑–∞–ø—É—â–µ–Ω!")

            # –ó–∞–ø—É—Å–∫–∞–µ–º polling-—Ü–∏–∫–ª Telegram –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.polling_thread = threading.Thread(target=self.telegram.run_polling, daemon=True)
            self.polling_thread.start()
            self.logger.info("‚úÖ Polling Telegram –∑–∞–ø—É—â–µ–Ω")

            self.running = True
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
            while True:
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
                    result = self.signal_processor.process_signals()
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ü–∏–∫–ª–æ–≤
                    self.signal_processor.cycle_count += 1
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ –±—ç–∫—Ç–µ—Å—Ç–µ –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
                    if self.signal_processor.cycle_count % 10 == 0:
                        self.signal_processor.send_backtest_report()
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–∞–∂–¥—ã–µ 20 —Ü–∏–∫–ª–æ–≤
                    if self.signal_processor.cycle_count % 20 == 0:
                        self.signal_processor.analyze_trading_patterns()
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
                    self.logger.info(f"üîÑ –¶–∏–∫–ª {self.signal_processor.cycle_count} –∑–∞–≤–µ—Ä—à–µ–Ω")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                    time.sleep(self.config['CHECK_INTERVAL'])
                    
                except KeyboardInterrupt:
                    self.logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                    break
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                    self.telegram.send_error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                    time.sleep(self.config['CHECK_INTERVAL'])
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.telegram.send_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.stop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Google Signals Bot...")
        self.running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä # –£–¥–∞–ª–µ–Ω–æ
        # if self.webhook_server: # –£–¥–∞–ª–µ–Ω–æ
        #     self.webhook_server.stop() # –£–¥–∞–ª–µ–Ω–æ
        #     self.logger.info("üõë –í–µ–±-—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") # –£–¥–∞–ª–µ–Ω–æ
        
        if self.telegram:
            self.telegram.send_message("üõë Google Signals Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.logger.info("‚úÖ Google Signals Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    if hasattr(signal_handler, 'bot'):
        signal_handler.bot.stop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = GoogleSignalsBot()
    signal_handler.bot = bot  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    
    if bot.initialize():
        bot.start()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
        sys.exit(1)

if __name__ == "__main__":
    main() 