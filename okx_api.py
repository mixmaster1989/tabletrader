#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π OKX API –¥–ª—è Google Signals Bot
"""

import logging
import okx.Trade as Trade
import okx.Account as Account
import okx.PublicData as PublicData
from typing import Dict, List, Optional

class OKXAPI:
    def __init__(self, api_key: str, api_secret: str, passphrase: str, testnet: bool = False):
        self.api_key = api_key
        self.api_secret = api_secret
        self.passphrase = passphrase
        self.testnet = testnet
        print(api_key)
        print(api_secret)
        print(passphrase)
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.account_api = Account.AccountAPI(api_key=api_key, api_secret_key=api_secret, passphrase=passphrase,flag='0')
        self.trade_api = Trade.TradeAPI(api_key=api_key, api_secret_key=api_secret, passphrase=passphrase,flag='0')
        self.public_api = PublicData.PublicAPI()

        self.logger.info(f"‚úÖ OKX API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (testnet: {testnet})")

    def get_last_price(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è SWAP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        try:
            instrument_id = f"{symbol}-USDT-SWAP"
            result = self.public_api.get_mark_price(instType='SWAP', instId=instrument_id)
            
            if result and result.get('code') == '0':
                data = result.get('data', [])
                if data:
                    price = float(data[0]['markPx'])
                    return price
            
            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {instrument_id}. –û—Ç–≤–µ—Ç API: {result}")
            return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            return None

    def get_positions(self, symbol: str = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ SWAP"""
        try:
            instrument_id = f"{symbol}-USDT-SWAP" if symbol else None
            result = self.account_api.get_positions(instType='SWAP', instId=instrument_id)
            
            if result and result.get('code') == '0':
                positions = result.get('data', [])
                open_positions = [p for p in positions if float(p.get('pos', '0')) != 0]
                return open_positions
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {result.get('msg', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                return []
            
        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []

    def get_balance(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            result = self.account_api.get_account_balance()
            
            if result and result.get('code') == '0':
                balance_data = result.get('data', [{}])[0]
                return balance_data
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {result.get('msg', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                return {}
                
        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {}

    def modify_trading_stop(self, params: Dict) -> Dict:
        """–ò–∑–º–µ–Ω–∏—Ç—å TP/SL –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            instrument_id = f"{params['symbol']}-USDT-SWAP"
            
            self.logger.info(f"üõ†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ TP/SL –¥–ª—è {instrument_id}: TP={params['take_profit']}, SL={params['stop_loss']}")

            result = self.trade_api.amend_algo_order(
                instId=instrument_id,
                algoId=params['algo_id'],
                newTpTriggerPx=str(params['take_profit']),
                newSlTriggerPx=str(params['stop_loss'])
            )

            if result.get('code') == '0':
                self.logger.info(f"‚úÖ TP/SL –¥–ª—è {instrument_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
                return {"success": True, "result": result.get('data', [{}])[0]}
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è TP/SL –¥–ª—è {instrument_id}: {result.get('msg')}")
                return {"success": False, "error": result.get('msg')}

        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ TP/SL –¥–ª—è {params['symbol']}: {e}")
            return {"success": False, "error": str(e)}

    def open_order_with_tp_sl(self, params: Dict) -> Dict:
        """–û—Ç–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä —Å TP/SL"""
        try:
            side = 'buy' if params['side'] == 'LONG' else 'sell'
            instrument_id = f"{params['symbol']}-USDT-SWAP"
            size = params['size']
            leverage = params['leverage']
            take_profit = params['take_profit']
            stop_loss = params['stop_loss']

            # 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ
            self.account_api.set_leverage(
                instId=instrument_id,
                lever=str(leverage),
                mgnMode='isolated'
            )
            self.logger.info(f"‚úÖ –ü–ª–µ—á–æ {leverage}x –¥–ª—è {instrument_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

            # 2. –û—Ç–∫—Ä—ã—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            order_result = self.trade_api.place_order(
                instId=instrument_id,
                tdMode='isolated',
                side=side,
                ordType='market',
                sz=str(size),
                tpTriggerPx=str(take_profit),
                slTriggerPx=str(stop_loss)
            )

            if order_result.get('code') == '0':
                order_data = order_result.get('data', [{}])[0]
                self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–∫—Ä—ã—Ç: {instrument_id} {side} {size}")
                return {"orderId": order_data.get('ordId'), 'success': True}
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞: {order_result.get('msg')}")
                return {"orderId": None, 'success': False, 'error': order_result.get('msg')}

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return {'success': False, 'error': str(e)}

    def calculate_position_size(self, symbol: str, usdt_size: float, last_price: float) -> Optional[float]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö (–¥–ª—è SWAP)"""
        try:
            instrument_id = f"{symbol}-USDT-SWAP"
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
            result = self.public_api.get_instruments(instType='SWAP', instId=instrument_id)
            if not (result and result.get('code') == '0' and result.get('data')):
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {instrument_id}")
                return None

            instrument_info = result['data'][0]
            ct_val = float(instrument_info['ctVal'])  # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ USD
            min_sz = float(instrument_info['minSz'])    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
            lot_sz = float(instrument_info['lotSz'])    # –®–∞–≥ –ª–æ—Ç–∞ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            num_contracts = usdt_size / (ct_val * last_price)
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —à–∞–≥–∞ –ª–æ—Ç–∞
            final_quantity = round(num_contracts / lot_sz) * lot_sz

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            if final_quantity < min_sz:
                self.logger.warning(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä {final_quantity} –º–µ–Ω—å—à–µ minSz {min_sz}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é minSz.")
                final_quantity = min_sz

            self.logger.info(f"‚úÖ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {instrument_id}: {final_quantity} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (–Ω–∞ —Å—É–º–º—É ~{usdt_size} USDT)")
            return round(final_quantity, 8)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {e}")
            return None
